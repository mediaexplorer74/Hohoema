<UserControl 
  x:Class="Hohoema.Views.Pages.PrimaryWindowCoreLayout"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:local="using:Hohoema.Views"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:i="using:Microsoft.Xaml.Interactivity"
  xmlns:core="using:Microsoft.Xaml.Interactions.Core"
  xmlns:windowsTriggers="using:WindowsStateTriggers"
  xmlns:mybehavior="using:Hohoema.Views.Behaviors"
  xmlns:uwpControls="using:Microsoft.Toolkit.Uwp.UI.Controls"
  xmlns:uwpUi="using:Microsoft.Toolkit.Uwp.UI"
  xmlns:iconPack="using:MahApps.Metro.IconPacks"
  xmlns:myextensions="using:Hohoema.Views.Extensions"
  xmlns:listItemControls="using:Hohoema.Views.Controls"
  xmlns:templateSelector="using:Hohoema.Views.TemplateSelector"
  xmlns:mytrigger="using:Hohoema.Views.StateTrigger"
  xmlns:servicesPlayer="using:Hohoema.Contracts.Services.Player" 
  xmlns:winui="using:Windows.UI.Xaml.Controls" 
  xmlns:models="using:Hohoema.Models.Application"  
  xmlns:muxc="using:Microsoft.UI.Xaml.Controls"
  xmlns:viewModels="using:Hohoema.ViewModels.PrimaryWindowCoreLayout" 
  xmlns:pageNavigation="using:Hohoema.Models.PageNavigation"
  xmlns:converter="using:Hohoema.Views.Converters"
  xmlns:i18nExt="using:I18NPortable.Xaml.Extensions"
  xmlns:liteInAppNotification="using:Hohoema.Views.Controls.LiteInAppNotification" 
  xmlns:service1="using:Hohoema.Models.Notification" 
  xmlns:animations="using:Microsoft.Toolkit.Uwp.UI.Animations" 
  xmlns:uwpBehaviour="using:Microsoft.Toolkit.Uwp.UI.Behaviors"
  x:Name="UserControlRoot"
  mc:Ignorable="d"
  d:DesignHeight="300"
  d:DesignWidth="400"
  IsTabStop="False"
  >
  <UserControl.Resources>
    <x:String x:Key="SideMenuPaneLength">280</x:String>
    <x:String x:Key="SideMenuPaneLength_TVMode">340</x:String>
    <x:String x:Key="DesktopFloatPlayerHeight">160</x:String>
    <x:String x:Key="MobileFloatPlayerHeight">240</x:String>
    <x:Double x:Key="MenuContentToggleAnimationDuration">175</x:Double>
    <Style TargetType="iconPack:PackIconMaterial">
      <Setter Property="RenderTransform">
        <Setter.Value>
          <ScaleTransform ScaleX="1.25" ScaleY="1.25" CenterX="12" CenterY="12" />
        </Setter.Value>
      </Setter>
    </Style>

    <converter:PageTypeToIconConverter x:Key="PageTypeToIconConverter" />


    <MenuFlyout x:Key="PinsMenuSubItemFlyout">
      <MenuFlyoutItem Text="{i18nExt:Localize Key=PinCurrentPage}" 
                      Command="{x:Bind AddPinCurrentPageCommand}"
                      />
      <MenuFlyoutItem Text="{i18nExt:Localize Key=AddPinFolder}" 
                      Command="{x:Bind AddBookmarkFolderCommand}"
                      />
    </MenuFlyout>

    <MenuFlyout x:Key="QueueMenuItemFlyout">
      <MenuFlyoutItem Text="{i18nExt:Localize Key=PlayAll}" 
                      Command="{Binding PlayQueuePlaylistCommand}"
                      >
        
      </MenuFlyoutItem>
    </MenuFlyout>


    <Style TargetType="muxc:NavigationViewItem" x:Key="NoIconNavigationViewItemStyle">
      <Setter Property="Foreground" Value="{ThemeResource NavigationViewItemForeground}"/>
      <Setter Property="Background" Value="{ThemeResource NavigationViewItemBackground}"/>
      <Setter Property="BorderBrush" Value="{ThemeResource NavigationViewItemBorderBrush}"/>
      <Setter Property="BorderThickness" Value="{StaticResource NavigationViewItemBorderThickness}"/>
      <Setter Property="UseSystemFocusVisuals" Value="True"/>
      <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="NavigationViewItem">
            <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" Height="40" Control.IsTemplateFocusTarget="True">
              <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="PointerStates">
                  <VisualState x:Name="Normal"/>
                  <VisualState x:Name="PointerOver">
                    <VisualState.Setters>
                      <Setter Target="LayoutRoot.(RevealBrush.State)" Value="PointerOver"/>
                      <Setter Target="LayoutRoot.Background" Value="{ThemeResource NavigationViewItemBackgroundPointerOver}"/>
                      <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource NavigationViewItemBorderBrushPointerOver}"/>
                      <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource NavigationViewItemForegroundPointerOver}"/>
                    </VisualState.Setters>
                  </VisualState>
                  <VisualState x:Name="Pressed">
                    <VisualState.Setters>
                      <Setter Target="LayoutRoot.(RevealBrush.State)" Value="Pressed"/>
                      <Setter Target="LayoutRoot.Background" Value="{ThemeResource NavigationViewItemBackgroundPressed}"/>
                      <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource NavigationViewItemBorderBrushPressed}"/>
                      <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource NavigationViewItemForegroundPressed}"/>
                    </VisualState.Setters>
                  </VisualState>
                  <VisualState x:Name="Selected">
                    <VisualState.Setters>
                      <Setter Target="LayoutRoot.Background" Value="{ThemeResource NavigationViewItemBackgroundSelected}"/>
                      <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource NavigationViewItemBorderBrushSelected}"/>
                      <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource NavigationViewItemForegroundSelected}"/>
                    </VisualState.Setters>
                  </VisualState>
                  <VisualState x:Name="PointerOverSelected">
                    <VisualState.Setters>
                      <Setter Target="LayoutRoot.(RevealBrush.State)" Value="PointerOver"/>
                      <Setter Target="LayoutRoot.Background" Value="{ThemeResource NavigationViewItemBackgroundSelectedPointerOver}"/>
                      <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource NavigationViewItemBorderBrushSelectedPointerOver}"/>
                      <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource NavigationViewItemForegroundSelectedPointerOver}"/>
                    </VisualState.Setters>
                  </VisualState>
                  <VisualState x:Name="PressedSelected">
                    <VisualState.Setters>
                      <Setter Target="LayoutRoot.(RevealBrush.State)" Value="Pressed"/>
                      <Setter Target="LayoutRoot.Background" Value="{ThemeResource NavigationViewItemBackgroundSelectedPressed}"/>
                      <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource NavigationViewItemBorderBrushSelectedPressed}"/>
                      <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource NavigationViewItemForegroundSelectedPressed}"/>
                    </VisualState.Setters>
                  </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="DisabledStates">
                  <VisualState x:Name="Enabled"/>
                  <VisualState x:Name="Disabled">
                    <VisualState.Setters>
                      <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource NavigationViewItemBorderBrushCheckedDisabled}"/>
                      <Setter Target="LayoutRoot.Opacity" Value="{ThemeResource ListViewItemDisabledThemeOpacity}"/>
                    </VisualState.Setters>
                  </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="IconStates">
                  <VisualState x:Name="IconVisible"/>
                  <VisualState x:Name="IconCollapsed">
                    <VisualState.Setters>
                      <Setter Target="IconBox.Visibility" Value="Collapsed"/>
                      <Setter Target="IconColumn.Width" Value="16"/>
                    </VisualState.Setters>
                  </VisualState>
                </VisualStateGroup>
              </VisualStateManager.VisualStateGroups>
              <Grid HorizontalAlignment="Left" VerticalAlignment="Center">
                <Rectangle x:Name="SelectionIndicator" Fill="{ThemeResource NavigationViewSelectionIndicatorForeground}" Height="24" Opacity="0.0" Width="0"/>
              </Grid>
              <Border x:Name="RevealBorder" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"/>
              <Grid x:Name="ContentGrid" HorizontalAlignment="Left" Height="40">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Name="IconColumn" Width="0"/>
                  <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <ToolTipService.ToolTip>
                  <ToolTip x:Name="ToolTip"/>
                </ToolTipService.ToolTip>
                <Viewbox x:Name="IconBox" Child="{TemplateBinding Icon}" Margin="16,12"/>
                <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentTransitions="{TemplateBinding ContentTransitions}" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
              </Grid>
            </Grid>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>


    <templateSelector:TypeBasedTemplateSelector x:Key="MenuItemTemplateSelector" >
      <DataTemplate templateSelector:DataTemplate.TargetType="{Binding Source=Hohoema.ViewModels.PrimaryWindowCoreLayout.SeparatorMenuItemViewModel, Converter={StaticResource StringToType}}" >
        <muxc:NavigationViewItemSeparator />
      </DataTemplate>


      <DataTemplate templateSelector:DataTemplate.TargetType="{Binding Source=Hohoema.ViewModels.LiveContentMenuItemViewModel, Converter={StaticResource StringToType}}" >
        <muxc:NavigationViewItem >
          <uwpControls:DockPanel Margin="0 4 16 4">
            <uwpControls:ImageEx Source="{Binding ThumbnailUrl}" CornerRadius="60" Width="32" Height="32" uwpControls:DockPanel.Dock="Left"
                                        Margin="0 0 8 0"
                                        />
            <StackPanel>
              <uwpControls:DockPanel>
                <StackPanel Orientation="Horizontal" uwpControls:DockPanel.Dock="Left">
                  <StackPanel.Resources>
                    <Style TargetType="Border">
                      <Setter Property="BorderThickness" Value="1" />
                    </Style>
                  </StackPanel.Resources>
                  <Border Visibility="{Binding IsOfficialContent}" BorderBrush="{StaticResource NiconicoColor_ProviderOfficial}" Margin="0 0 4 0">
                    <TextBlock Text="{i18nExt:Localize Key=LiveContentOfficialContent}" Style="{StaticResource CaptionTextBlockStyle}" Foreground="{StaticResource NiconicoColor_ProviderOfficial}" Padding="4 0 4 0" />
                  </Border>
                  <Border Visibility="{Binding IsChannelContent}" BorderBrush="{StaticResource NiconicoColor_ProviderChannel}" Margin="0 0 4 0">
                    <TextBlock Text="{i18nExt:Localize Key=LiveContentChannelContent}" Style="{StaticResource CaptionTextBlockStyle}" Foreground="{StaticResource NiconicoColor_ProviderChannel}" Padding="4 0 4 0" />
                  </Border>
                </StackPanel>
                <TextBlock Text="{Binding CommunityName}" Style="{StaticResource CaptionTextBlockStyle}" Opacity="0.7" />
              </uwpControls:DockPanel>
              <TextBlock Text="{Binding Title}" />
              <TextBlock Style="{StaticResource CaptionTextBlockStyle}" Opacity="0.7">
                <Run Text="{Binding ElapsedTime, Converter={StaticResource TiemSpanToLocalizedString}}" />
                <Run Text="{i18nExt:Localize Key=LiveElapsedAt}" />
              </TextBlock>
             </StackPanel>
          </uwpControls:DockPanel>
        </muxc:NavigationViewItem>
      </DataTemplate>

      <DataTemplate templateSelector:DataTemplate.TargetType="{Binding Source=Hohoema.ViewModels.LogginUserLiveSummaryItemViewModel, Converter={StaticResource StringToType}}" >
        <muxc:NavigationViewItem x:Name="LiveSummaryNVI" MenuItemsSource="{Binding Items}" IsExpanded="False"
                                 >
          <muxc:NavigationViewItem.Icon>
            <winui:SymbolIcon Symbol="Video" />
          </muxc:NavigationViewItem.Icon>
          
          <i:Interaction.Behaviors>
            <core:EventTriggerBehavior EventName="Tapped">
              <core:CallMethodAction TargetObject="{Binding}" MethodName="RefreshItems" />
            </core:EventTriggerBehavior>
          </i:Interaction.Behaviors>
          
          <uwpControls:DockPanel>
            <Grid uwpControls:DockPanel.Dock="Right">
              <Border Visibility="{Binding IsUnread}" Background="{ThemeResource SystemAccentColor}" CornerRadius="60" Width="32" Height="32">
                <TextBlock Text="{Binding NotifyCount}" VerticalAlignment="Center" HorizontalAlignment="Center" />
              </Border>
              <Border Visibility="{Binding IsUnread, Converter={StaticResource BoolNegation}}" Background="Gray" CornerRadius="60" Width="32" Height="32">
                <TextBlock Text="{Binding NotifyCount}" VerticalAlignment="Center" HorizontalAlignment="Center" />
              </Border>
            </Grid>
            
            <TextBlock Text="{i18nExt:Localize Key=NicoliveSearchMode.OnAir}" VerticalAlignment="Center" />
          </uwpControls:DockPanel>
        </muxc:NavigationViewItem>
      </DataTemplate>
      
      
      <DataTemplate templateSelector:DataTemplate.TargetType="{Binding Source=Hohoema.ViewModels.PinMenuItemViewModel, Converter={StaticResource StringToType}}">
        <muxc:NavigationViewItem>
          <muxc:NavigationViewItem.ContextFlyout>
            <MenuFlyout Opening="PinItemMenuFlyout_Opening">
              <MenuFlyoutItem Text="{i18nExt:Localize Key=PinChangeArias}" Command="{Binding OverridePinCommand}" CommandParameter="{Binding}" />
              <MenuFlyoutSubItem Text="{i18nExt:Localize Key=Pin_Move}">
                <MenuFlyoutItem Text="{i18nExt:Localize Key=Pin_MoveToHead}" Command="{Binding MovePinToMostTopCommand}" CommandParameter="{Binding}" />
                <MenuFlyoutItem Text="{i18nExt:Localize Key=Pin_MovePreview}" Command="{Binding MovePinToTopCommand}" CommandParameter="{Binding}" />
                <MenuFlyoutItem Text="{i18nExt:Localize Key=Pin_MoveNext}" Command="{Binding MovePinToBottomCommand}" CommandParameter="{Binding}" />
                <MenuFlyoutItem Text="{i18nExt:Localize Key=Pin_MoveToTail}" Command="{Binding MovePinToMostBottomCommand}" CommandParameter="{Binding}" />
              </MenuFlyoutSubItem>
              <MenuFlyoutSubItem x:Name="MoveToFolderItem" Text="{i18nExt:Localize Key=PinMoveToFolder}" />
              <MenuFlyoutSeparator />
              <MenuFlyoutItem Text="{i18nExt:Localize Key=PinRemove}" Command="{Binding DeletePinCommand}" CommandParameter="{Binding}" />
            </MenuFlyout>
          </muxc:NavigationViewItem.ContextFlyout>
          <StackPanel>
            <Grid>
              <TextBlock Text="{Binding Pin.Label, Mode=OneTime}" Visibility="{Binding Pin.OverrideLabel, Converter={StaticResource EmptyStringToBoolean}}" />
              <TextBlock Text="{Binding Pin.OverrideLabel}" Visibility="{Binding Pin.OverrideLabel, Converter={StaticResource NotEmptyStringToBoolean}}" />
            </Grid>

            <TextBlock Text="{Binding Description}" FontSize="12" Opacity="0.7" />
          </StackPanel>
        </muxc:NavigationViewItem>
      </DataTemplate>


      <DataTemplate templateSelector:DataTemplate.TargetType="{Binding Source=Hohoema.ViewModels.PinFolderMenuItemViewModel, Converter={StaticResource StringToType}}">
        <muxc:NavigationViewItem MenuItemsSource="{Binding Items}" IsExpanded="{Binding IsOpen, Mode=TwoWay}">
          <muxc:NavigationViewItem.ContextFlyout>
            <MenuFlyout>
              <MenuFlyoutItem Text="{i18nExt:Localize Key=PinCurrentPage}" 
                      Click="PinCurrentPageMenuFlyoutItem_Click"
                      />
              <MenuFlyoutSeparator />
              <MenuFlyoutItem Text="{i18nExt:Localize Key=PinChangeArias}" Command="{Binding OverridePinCommand}" CommandParameter="{Binding}" />
              <MenuFlyoutSubItem Text="{i18nExt:Localize Key=Pin_Move}">
                <MenuFlyoutItem Text="{i18nExt:Localize Key=Pin_MoveToHead}" Command="{Binding MovePinToMostTopCommand}" CommandParameter="{Binding}" />
                <MenuFlyoutItem Text="{i18nExt:Localize Key=Pin_MovePreview}" Command="{Binding MovePinToTopCommand}" CommandParameter="{Binding}" />
                <MenuFlyoutItem Text="{i18nExt:Localize Key=Pin_MoveNext}" Command="{Binding MovePinToBottomCommand}" CommandParameter="{Binding}" />
                <MenuFlyoutItem Text="{i18nExt:Localize Key=Pin_MoveToTail}" Command="{Binding MovePinToMostBottomCommand}" CommandParameter="{Binding}" />
              </MenuFlyoutSubItem>
              <MenuFlyoutSeparator />
              <MenuFlyoutItem Text="{i18nExt:Localize Key=PinRemove}" Command="{Binding DeletePinCommand}" CommandParameter="{Binding}" />
            </MenuFlyout>
          </muxc:NavigationViewItem.ContextFlyout>
          <StackPanel>
            <Grid>
              <TextBlock Text="{Binding Pin.Label, Mode=OneTime}" Visibility="{Binding Pin.OverrideLabel, Converter={StaticResource EmptyStringToBoolean}}" />
              <TextBlock Text="{Binding Pin.OverrideLabel}" Visibility="{Binding Pin.OverrideLabel, Converter={StaticResource NotEmptyStringToBoolean}}" />
            </Grid>

          </StackPanel>
        </muxc:NavigationViewItem>
      </DataTemplate>

      <DataTemplate templateSelector:DataTemplate.TargetType="{Binding Source=Hohoema.ViewModels.PrimaryWindowCoreLayout.MenuItemViewModel, Converter={StaticResource StringToType}}" >
        <muxc:NavigationViewItem Icon="{Binding PageType, Converter={StaticResource PageTypeToIconConverter}}">
          <winui:ToolTipService.ToolTip>
            <TextBlock Text="{Binding Label}" />
          </winui:ToolTipService.ToolTip>

          <TextBlock Text="{Binding Label}" />
        </muxc:NavigationViewItem>
      </DataTemplate>

      <DataTemplate templateSelector:DataTemplate.TargetType="{Binding Source=Hohoema.ViewModels.PrimaryWindowCoreLayout.QueueMenuItemViewModel, Converter={StaticResource StringToType}}" >
        <muxc:NavigationViewItem ContextFlyout="{StaticResource QueueMenuItemFlyout}">
          <winui:ToolTipService.ToolTip>
            <TextBlock Text="{i18nExt:Localize Key=HohoemaPageType.VideoQueue}" />
          </winui:ToolTipService.ToolTip>

          <muxc:NavigationViewItem.Icon>
            <SymbolIcon Symbol="Play" />
          </muxc:NavigationViewItem.Icon>

          <uwpControls:DockPanel>

            <Border uwpControls:DockPanel.Dock="Right" Background="{ThemeResource SystemBaseMediumLowColor}" CornerRadius="60" Width="32" Height="32">
              <TextBlock Text="{Binding QueuePlaylistCount.Value}" VerticalAlignment="Center" HorizontalAlignment="Center" />
            </Border>
              
            <TextBlock VerticalAlignment="Center">
              <Run Text="{i18nExt:Localize Key=HohoemaPageType.VideoQueue}" />
            </TextBlock>
            

          </uwpControls:DockPanel>
        </muxc:NavigationViewItem>
      </DataTemplate>

      <DataTemplate templateSelector:DataTemplate.TargetType="{Binding Source=Hohoema.ViewModels.MylistSubMenuMenu, Converter={StaticResource StringToType}}" >
        <muxc:NavigationViewItem MenuItemsSource="{Binding Items}" 
                                 Icon="List"
                                 >
          <winui:ToolTipService.ToolTip>
            <TextBlock Text="{Binding Label}" />
          </winui:ToolTipService.ToolTip>

          <muxc:NavigationViewItem.Content>
            <TextBlock Text="{Binding Label}" />
          </muxc:NavigationViewItem.Content>

          <muxc:NavigationViewItem.ContextFlyout>
            <MenuFlyout>
              <MenuFlyoutItem Text="{i18nExt:Localize Key=HohoemaPageType.UserMylist}"
                              Command="{Binding MylistPageOpenCommand}"
                              CommandParameter="OwnerMylistManage"
                              />
            </MenuFlyout>
          </muxc:NavigationViewItem.ContextFlyout>

        </muxc:NavigationViewItem>
      </DataTemplate>

      <DataTemplate templateSelector:DataTemplate.TargetType="{Binding Source=Hohoema.ViewModels.LocalMylistSubMenuItemViewModel, Converter={StaticResource StringToType}}" >
        <muxc:NavigationViewItem MenuItemsSource="{Binding Items}" 
                                 Icon="List"
                                 >
          <winui:ToolTipService.ToolTip>
            <TextBlock Text="{Binding Label}" />
          </winui:ToolTipService.ToolTip>

          <TextBlock Text="{Binding Label}" />

          <muxc:NavigationViewItem.ContextFlyout>
            <MenuFlyout>
              <MenuFlyoutItem Text="{i18nExt:Localize Key=HohoemaPageType.LocalPlaylistManage}"
                              Command="{Binding OpenLocalPlaylistManageCommand}"
                              CommandParameter="LocalPlaylistManage"
                              />
            </MenuFlyout>
          </muxc:NavigationViewItem.ContextFlyout>
        </muxc:NavigationViewItem>
      </DataTemplate>

      <DataTemplate templateSelector:DataTemplate.TargetType="{Binding Source=Hohoema.ViewModels.PinsMenuSubItemViewModel, Converter={StaticResource StringToType}}" >
        <muxc:NavigationViewItem MenuItemsSource="{Binding Items}" 
                                 Icon="Pin"
                                 ContextFlyout="{StaticResource PinsMenuSubItemFlyout}"
                                 IsExpanded="True"
                                 Tag="Pins"
                                 >
          <winui:ToolTipService.ToolTip>
            <TextBlock Text="{Binding Label}" />
          </winui:ToolTipService.ToolTip>

          <TextBlock Text="{Binding Label}" />
        </muxc:NavigationViewItem>
      </DataTemplate>

      <DataTemplate templateSelector:DataTemplate.TargetType="{Binding Source=Hohoema.ViewModels.MenuSubItemViewModelBase, Converter={StaticResource StringToType}}" >
        <muxc:NavigationViewItem MenuItemsSource="{Binding Items}" 
                                 >
          <winui:ToolTipService.ToolTip>
            <TextBlock Text="{Binding Label}" />
          </winui:ToolTipService.ToolTip>

          <TextBlock Text="{Binding Label}" />
        </muxc:NavigationViewItem>
      </DataTemplate>

      <DataTemplate templateSelector:DataTemplate.TargetType="{Binding Source=Hohoema.ViewModels.SubscriptionMenuItemViewModel, Converter={StaticResource StringToType}}" >
        <muxc:NavigationViewItem MenuItemsSource="{Binding SubscGroups}"
                                 IsExpanded="True"
                                 >

          <muxc:NavigationViewItem.ContextFlyout>
            <MenuFlyout>
              <MenuFlyoutItem Text="{i18nExt:Localize Key=HohoemaPageType.SubscriptionManagement}" 
                              Command="{Binding OpenSubscriptionGroupManagementPageCommand}"
                              />
            </MenuFlyout>
          </muxc:NavigationViewItem.ContextFlyout>
          
          <winui:ToolTipService.ToolTip>
            <TextBlock Text="{Binding Label}" />
          </winui:ToolTipService.ToolTip>

          <muxc:NavigationViewItem.Icon>
            <SymbolIcon Symbol="Globe" />
          </muxc:NavigationViewItem.Icon>

          <TextBlock Text="{Binding Label}" VerticalAlignment="Center" />

        </muxc:NavigationViewItem>
      </DataTemplate>

      <DataTemplate templateSelector:DataTemplate.TargetType="{Binding Source=Hohoema.ViewModels.SubscriptionGroupMenuItemViewModel, Converter={StaticResource StringToType}}" >
        <muxc:NavigationViewItem>

          <muxc:NavigationViewItem.ContextFlyout>
            <MenuFlyout>
              <MenuFlyoutItem Text="{i18nExt:Localize Key=SubscGroup_AllPlayUnwatched}" 
                              Icon="Play"
                              Command="{Binding PlayNewVideosCommand}"
                              />
              <MenuFlyoutItem Text="{i18nExt:Localize Key=SubscGroupSettings_AddToQueue}" 
                              Icon="Add"
                              Command="{Binding AddToQueueNewVideosCommand}"
                              />
              <MenuFlyoutItem Text="{i18nExt:Localize Key=OpenSubscriptionSourceVideoList}" 
                              Icon="List"
                              Command="{Binding OpenSubscriptionGroupVideoListPageCommand}"
                              />
            </MenuFlyout>
          </muxc:NavigationViewItem.ContextFlyout>

          <uwpControls:DockPanel>
            <Border uwpControls:DockPanel.Dock="Right" Background="{ThemeResource SystemBaseMediumLowColor}" CornerRadius="60" Width="32" Height="32">
              <TextBlock Text="{Binding NewVideoCount}" VerticalAlignment="Center" HorizontalAlignment="Center" />
            </Border>
            <TextBlock Text="{Binding Label}" VerticalAlignment="Center" />
          </uwpControls:DockPanel>

        </muxc:NavigationViewItem>
      </DataTemplate>
    </templateSelector:TypeBasedTemplateSelector>
    
    <DataTemplate x:Key="PinMenuItemTemplate">
      <StackPanel Orientation="Horizontal" Opacity="0.85" Margin="0 0 0 0">
        <ContentControl Content="{Binding PageType,Mode=OneTime}" ContentTemplateSelector="{StaticResource PageTypeIconTemplateSelector}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Opacity="0.7" Width="24" Height="24" />
        <Border Height="4" Width="16" />
        <!--  OverrideLabelが未設定の場合の表示 -->
        <StackPanel Orientation="Horizontal" Visibility="{Binding OverrideLabel, Converter={StaticResource NullToVisibility}}">
          <TextBlock Text="{Binding Label,Mode=OneTime}" VerticalAlignment="Center" FontSize="15" />
          <Border Height="4" Width="8" />
          <TextBlock Style="{StaticResource CaptionTextBlockStyle}" VerticalAlignment="Center">
                            (<Run Text="{Binding PageType,Mode=OneTime}" />)</TextBlock>
        </StackPanel>
        <!-- OverrideLabelが設定済みの場合 -->
        <StackPanel Orientation="Horizontal" Visibility="{Binding OverrideLabel, Converter={StaticResource NotNullToVisibility}}">
          <TextBlock Text="{Binding OverrideLabel}" VerticalAlignment="Center" FontSize="15" />
        </StackPanel>
      </StackPanel>
    </DataTemplate>
    
    
    <Style x:Key="BaseStyle" TargetType="uwpControls:ImageExBase">
      <Setter Property="IsCacheEnabled" Value="True" />
      <Setter Property="Stretch" Value="UniformToFill" />
      <Setter Property="PlaceholderStretch" Value="UniformToFill" />
      <Setter Property="HorizontalAlignment" Value="Center" />
      <Setter Property="VerticalAlignment" Value="Center" />
      <Setter Property="Background" Value="Transparent" />
      <Setter Property="Foreground" Value="White" />
    </Style>
    <!--Create a Style based on BaseStyle-->
    <Style x:Key="RoundStyle" TargetType="uwpControls:ImageEx" BasedOn="{StaticResource BaseStyle}">
      <Setter Property="Width" Value="48" />
      <Setter Property="Height" Value="48" />
      <Setter Property="CornerRadius" Value="999" />
    </Style>

    <Thickness x:Key="NavigationViewHeaderMargin">0</Thickness>

    <Thickness x:Key="NavigationViewBorderThickness">0</Thickness>

    
    <StaticResource x:Key="NavigationViewExpandedPaneBackground" ResourceKey="ApplicationHeaderBackgroundBrush" />

    <StaticResource x:Key="NavigationViewDefaultPaneBackground" ResourceKey="ApplicationHeaderBackgroundBrush" />
    <StaticResource x:Key="NavigationViewTopPaneBackground" ResourceKey="ApplicationHeaderBackgroundBrush" />

    <SolidColorBrush x:Key="NavigationViewContentBackground" Color="Transparent" />
  </UserControl.Resources>


  <Grid>
    
    <Grid x:Name="RootLayout" 
        Background="{ThemeResource ApplicationContentBackgroundBrush}"            
        >

      <Grid x:Name="PaneBackgroundForTVLayout" HorizontalAlignment="Left" Background="{ThemeResource ApplicationHeaderBackgroundBrush}" Width="48" Opacity="0"
          IsHitTestVisible="False"
          >

      </Grid>
      <uwpControls:DockPanel>
        <Border uwpControls:DockPanel.Dock="Top"
              x:Name="MobilePlayerTopMargin"
              Height="{Binding ElementName=PlayerFrame, Path=ActualHeight, Mode=OneWay}"
              Visibility="Collapsed" />
        <muxc:NavigationView x:Name="CoreNavigationView"
                      MenuItemsSource="{x:Bind _vm.MenuItems_Offline}"
                      MenuItemTemplateSelector="{StaticResource MenuItemTemplateSelector}"
                      PaneDisplayMode="{x:Bind _vm.AppearanceSettings.MenuPaneDisplayMode, Mode=OneWay}"
                      ItemInvoked="CoreNavigationView_ItemInvoked"
                      BackRequested="CoreNavigationView_BackRequested"
                      IsSettingsVisible="True"
                      IsTitleBarAutoPaddingEnabled="True"
                      SelectionFollowsFocus="Disabled"
                      AlwaysShowHeader="False"
                      XYFocusLeftNavigationStrategy="Projection"
                      XYFocusRightNavigationStrategy="Projection"     
                           DisplayModeChanged="CoreNavigationView_DisplayModeChanged"                                                             
                      >
          <muxc:NavigationView.Resources>
            <!-- 
            work around "Unable to Interact with WebView in WinUI 2.6" 
          
            see@ https://github.com/microsoft/microsoft-ui-xaml/issues/5299
          -->
            <x:Double x:Key="NavigationViewContentGridCornerRadius">0.0</x:Double>
          </muxc:NavigationView.Resources>

          <muxc:NavigationView.PaneHeader>
            <Grid >
              <TextBlock Text="{x:Bind _vm.NiconicoSession.ServiceStatus, Mode=OneWay}"
                       x:Name="ServiceStateText" 
                       Margin="8 0"
                       Visibility="Collapsed"
                       />
            </Grid>
            <!--
          <StackPanel Visibility="Collapsed">
            <uwpToolkitControls:DockPanel Margin="0">
              <Button Command="{x:Bind AddPinCurrentPageCommand}"
                            Background="Transparent"
                            Height="24"
                            uwpToolkitControls:DockPanel.Dock="Right"
                            Margin="0 0 8 0">
                <SymbolIcon Symbol="Add" ToolTipService.ToolTip="{i18nExt:Localize Key=PinCurrentPage}"
                                  Opacity="0.55" />
              </Button>
              <TextBlock Text="{i18nExt:Localize Key=Pin}"
                               VerticalAlignment="Center"
                               FontSize="14"
                               Margin="16 0 0 0"
                               Opacity="0.55" />
            </uwpToolkitControls:DockPanel>
            <ListView ItemsSource="{Binding Pins}"
                            ItemTemplate="{StaticResource PinMenuItemTemplate}"
                            IsItemClickEnabled="True"
                            SelectionMode="None"
                            TabIndex="1"
                            CanReorderItems="True"
                            AllowDrop="True"
                            xmlns:myExtensions="using:Hohoema.Views.Extensions"
                            myExtensions:ListViewBase.ItemContextFlyoutCustomObjectToTag="{Binding}">
              <i:Interaction.Behaviors>
                <core:EventTriggerBehavior EventName="ItemClick">
                  <core:InvokeCommandAction Command="{Binding PageManager.OpenPageCommand}"
                                                  InputConverter="{StaticResource ItemClickEventArgsConverter}" />
                </core:EventTriggerBehavior>
              </i:Interaction.Behaviors>
              <myExtensions:ListViewBase.ItemContextFlyoutTemplate>
                <DataTemplate>
                  <MenuFlyout>
                    <MenuFlyoutItem Text="{i18nExt:Localize Key=PinChangeArias}"
                                          Command="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Tag.ChangePinOverrideLabelCommand}"
                                          CommandParameter="{Binding}" />
                    <MenuFlyoutSeparator />
                    <MenuFlyoutItem Text="{i18nExt:Localize Key=PinRemove}"
                                          Command="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Tag.RemovePinCommand}"
                                          CommandParameter="{Binding}" />
                  </MenuFlyout>
                </DataTemplate>
              </myExtensions:ListViewBase.ItemContextFlyoutTemplate>
            </ListView>
            <StackPanel Visibility="{Binding Pins, Converter={StaticResource EmptyCollectionVisibilityConverter}}"
                              Margin="0 8">
              <TextBlock Opacity="0.7"
                               FontSize="12"
                               Margin="24 0 0 0">
                      <Run Text="{i18nExt:Localize Key=PinHowToAddition}" />
              </TextBlock>
            </StackPanel>
          </StackPanel>
          -->
          </muxc:NavigationView.PaneHeader>

          <muxc:NavigationView.PaneFooter>

            <Button x:Name="OpenAccountButton"
                        Padding="8 0 0 0"
                  MinHeight="40"
                        Background="Transparent"
                        HorizontalAlignment="Stretch"
                        HorizontalContentAlignment="Left"
                        VerticalContentAlignment="Center"
                        TabIndex="100"
                  CornerRadius="4"
                  Margin="4 0"
                  BorderThickness="0"
                      >
              <Button.Flyout>
                <MenuFlyout x:Name="AccountMenuFlyout" Placement="RightEdgeAlignedTop">

                  <MenuFlyoutItem x:Name="MenuFlyoutItem_OpenSettings"
                                      Text="{i18nExt:Localize Key=HohoemaPageType.Settings}"
                                      Command="{x:Bind _vm.PageManager.OpenPageCommand}"
                                    CommandParameter="{x:Bind pageNavigation:HohoemaPageType.Settings}"
                                Visibility="Collapsed"
                                    />

                  <MenuFlyoutItem x:Name="MenuFlyoutItem_OpenDebugPage"
                                      Visibility="Collapsed" Text="Open Debug Page"
                                      Command="{x:Bind _vm.OpenDebugPageCommand}" />

                  <MenuFlyoutItem x:Name="MenuFlyoutItem_OpenFollowPage"
                                      Visibility="Collapsed" Text="{i18nExt:Localize Key=HohoemaPageType.FollowManage}"
                                      Command="{x:Bind _vm.OpenFollowPageCommand}" />


                  <MenuFlyoutItem x:Name="MenuFlyoutItem_OpenAccountInfo"
                                      Visibility="Collapsed" Text="{i18nExt:Localize Key=LogInUserInfo}"
                                      Command="{x:Bind _vm.OpenAccountInfoCommand}" />

                  <MenuFlyoutSeparator />

                  <MenuFlyoutItem x:Name="MenuFlyoutItem_Logout"
                                      Visibility="Collapsed" Text="{i18nExt:Localize Key=LogOut}"
                                      Command="{x:Bind _vm.LogoutFromNiconicoCommand}" />

                  <MenuFlyoutItem x:Name="MenuFlyoutItem_Login"
                                      Visibility="Collapsed" Text="{i18nExt:Localize Key=LogIn}"
                                      Command="{x:Bind _vm.NiconicoLoginService.LoginCommand}" />


                </MenuFlyout>
              </Button.Flyout>
              <uwpControls:SwitchPresenter x:Name="AccountButtonSwitchPresenter" Value="{x:Bind _vm.NiconicoSession.IsLoggedIn, Mode=OneWay}">
                <uwpControls:Case IsDefault="True">
                  <uwpControls:Case.Value>
                    <x:Boolean>False</x:Boolean>
                  </uwpControls:Case.Value>
                  <StackPanel Orientation="Horizontal" Spacing="8">
                    <iconPack:PackIconMaterial Kind="Account" Margin="0 4 0 0" Height="16" Width="24" Foreground="Gray" />
                    <TextBlock Text="{i18nExt:Localize Key=Account}"
                                     Margin="2 0 0 0"
                             />
                  </StackPanel>
                </uwpControls:Case>

                <uwpControls:Case>
                  <uwpControls:Case.Value>
                    <x:Boolean>True</x:Boolean>
                  </uwpControls:Case.Value>
                  <uwpControls:DockPanel Margin="2 0 0 0"
                                                  x:Name="AccountInfoLayout"
                                                      >
                    <uwpControls:ImageEx Source="{x:Bind _vm.LoginUserIcon, Mode=OneWay}"
                             uwpControls:DockPanel.Dock="Left"
                             Height="22"
                             Width="22"
                             Margin="0 0 0 0"
                                 CornerRadius="60"
                                              IsTabStop="False"
                                 />
                    <StackPanel Margin="11 0 0 0">
                      <TextBlock Text="{x:Bind _vm.LoginUserName, Mode=OneWay}" VerticalAlignment="Center" TextLineBounds="TrimToBaseline" />
                    </StackPanel>
                  </uwpControls:DockPanel>
                </uwpControls:Case>
              </uwpControls:SwitchPresenter>
            </Button>
          </muxc:NavigationView.PaneFooter>

          <muxc:NavigationView.AutoSuggestBox>
            <AutoSuggestBox x:Name="SearchTextBox" Text="{x:Bind SearchInputText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                          PlaceholderText="{i18nExt:Localize Key=Search}" 
                          TabIndex="103" Margin="0" 
                          UseSystemFocusVisuals="True"
                          IsFocusEngagementEnabled="True" 
                          FocusVisualPrimaryThickness="2"
                          QuerySubmitted="SearchTextBox_QuerySubmitted"
                          TextChanged="SearchTextBox_TextChanged"
                          UpdateTextOnSelect="False"
                          GotFocus="SearchTextBox_GotFocus"    
                          >
              <i:Interaction.Behaviors>
                <core:EventTriggerBehavior EventName="GotFocus">
                  <core:CallMethodAction MethodName="SelectAll" />
                </core:EventTriggerBehavior>
                <mybehavior:KeyboardTrigger Key="Enter" x:Name="SearchSubmitWithEnterKeyTrigger" IsEnabled="False">
                  <core:InvokeCommandAction Command="{x:Bind _vm.SearchCommand}" CommandParameter="{x:Bind SearchInputText, Mode=OneWay}" />
                </mybehavior:KeyboardTrigger>
                <mybehavior:UINavigationTrigger Kind="Cancel" IsRequireFocus="True">
                  <core:ChangePropertyAction PropertyName="IsFocusEngaged" Value="False" />
                </mybehavior:UINavigationTrigger>
              </i:Interaction.Behaviors>

              <AutoSuggestBox.ItemTemplate>
                <DataTemplate>
                  <TextBlock Text="{Binding Id, Converter={StaticResource LocalizeConverter}}" />
                </DataTemplate>
              </AutoSuggestBox.ItemTemplate>
            </AutoSuggestBox>
          </muxc:NavigationView.AutoSuggestBox>

          <muxc:NavigationView.Content>
            <!-- CacheSize="0" はキャッシュを使用した場合にページコンテンツのメモリ解放が正常に行われないからか
               使用メモリ量が数MBずつ際限なく増えていく問題があるため。
               see@ https://github.com/tor4kichi/Hohoema/issues/836
          -->
            <Frame x:Name="ContentFrame" VerticalContentAlignment="Stretch" DataContext="{x:Null}" Margin="0 0 0 0"
                 CacheSize="5"
                 
                       >
              <Frame.ContentTransitions>
                <TransitionCollection>
                  <NavigationThemeTransition>
                    <NavigationThemeTransition.DefaultNavigationTransitionInfo>
                      <SlideNavigationTransitionInfo Effect="FromRight" />
                    </NavigationThemeTransition.DefaultNavigationTransitionInfo>
                  </NavigationThemeTransition>
                </TransitionCollection>
              </Frame.ContentTransitions>
            </Frame>
          </muxc:NavigationView.Content>
        </muxc:NavigationView>
      </uwpControls:DockPanel>

      
      <Grid x:Name="PlayerLayout"
          Visibility="Collapsed"
          uwpUi:VisualExtensions.NormalizedCenterPoint="0.5"
          >

        <animations:Implicit.ShowAnimations>
          <animations:ScaleAnimation To="1.0" From="0.95" Duration="0:0:0.25"  />
          <animations:OpacityAnimation To="1.0" Duration="0:0:0.25" />
        </animations:Implicit.ShowAnimations>

        <animations:Implicit.HideAnimations>
          <animations:ScaleAnimation To="0.95" Duration="0:0:0.25" />
          <animations:OpacityAnimation To="0.0" Duration="0:0:0.25" />
        </animations:Implicit.HideAnimations>

        <Frame x:Name="PlayerFrame"
             DataContext="{x:Null}"
             CacheSize="2"
             HorizontalContentAlignment="Stretch"
             VerticalContentAlignment="Stretch"
             XYFocusKeyboardNavigation="Disabled"
             Transitions="{StaticResource SuppressNavigationTransitionCollection}"
             ContentTransitions="{StaticResource SuppressNavigationTransitionCollection}"
             Background="{ThemeResource ApplicationPageBackgroundThemeBrush}"
             >
          <i:Interaction.Behaviors>
            <mybehavior:UINavigationTrigger Kind="View" Hold="True">
              <core:CallMethodAction TargetObject="{x:Bind}" MethodName="TogglePlayerFillBtwWindowInWindow" />
            </mybehavior:UINavigationTrigger>
          </i:Interaction.Behaviors>
        </Frame>

      </Grid>


      <local:NoUIProcessScreen x:Name="NoUIProcessScreen" />


      <Grid Height="32" VerticalAlignment="Top">
        <Border x:Name="DraggableContent" IsTapEnabled="True" Background="Transparent" IsHitTestVisible="True">
          <TextBlock x:Name="TitleBarTextBlock" Text="Hohoema" Margin="12 0 0 0" VerticalAlignment="Center" Opacity="0.9" FontSize="13" HorizontalAlignment="Left" >
            <TextBlock.RenderTransform>
              <TranslateTransform x:Name="TitleBarTextBlockTransform"></TranslateTransform>
            </TextBlock.RenderTransform>
          </TextBlock>
        </Border>
      </Grid>

      
      <StackPanel x:Name="ErrorTrackingUI" Orientation="Horizontal" Visibility="Collapsed" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="0 0 200 0" Spacing="8">
        <Button Height="32" ToolTipService.ToolTip="ErrorTrankingTool" Background="Transparent" Opacity="0.5">
          <Button.Content>
            <iconPack:PackIconMaterial Kind="Bug" />
          </Button.Content>

          <Button.Flyout>
            <MenuFlyout Placement="Bottom">
              <MenuFlyoutItem Text="ログファイルを表示" Command="{x:Bind _vm.OpenDebugLogFileCommand}" />
              <MenuFlyoutSeparator />
              <MenuFlyoutItem Text="アプリを再起動" Command="{x:Bind _vm.RequestApplicationRestartCommand}" />
            </MenuFlyout>
          </Button.Flyout>
        </Button>
      </StackPanel>

      <Grid>
        <muxc:TeachingTip x:Name="AppErrorTeachingTip"
                        Title="アプリにエラーが発生しました【デバッグモード】"
                        ActionButtonContent="エラー報告"
                        CloseButtonContent="{i18nExt:Localize Key=Cancel}"
                        IsLightDismissEnabled="False"
                        Closed="AppErrorTeachingTip_Closed"
                        PreferredPlacement="Top"
                        >
          <muxc:TeachingTip.Content>
            <StackPanel Spacing="4">
              <winui:TextBlock Text="アプリは継続して利用できますが、異常があればアプリを再起動してください。" TextWrapping="Wrap" />
              <winui:TextBlock Text="キャンセルを選んでも簡易クラッシュレポートは送信されます。"  TextWrapping="Wrap" />
            </StackPanel>
          </muxc:TeachingTip.Content>

        </muxc:TeachingTip>
      </Grid>

      <listItemControls:HohoemaInAppNotification x:Name="HohoemaInAppNotification" VerticalAlignment="Bottom">
        <i:Interaction.Behaviors>
          <mybehavior:UINavigationTrigger Kind="Context2" IsRequireFocus="False">
            <core:CallMethodAction MethodName="TryFocusOrDismissWhenNoCommands" />
          </mybehavior:UINavigationTrigger>
          <mybehavior:UINavigationTrigger Kind="Cancel" IsRequireFocus="True">
            <core:CallMethodAction MethodName="Dismiss" />
          </mybehavior:UINavigationTrigger>
        </i:Interaction.Behaviors>
        
      </listItemControls:HohoemaInAppNotification>

      <!-- Lite -->
      <liteInAppNotification:LiteInAppNotification x:Name="LiteInAppNotification" 
                                                 HorizontalAlignment="Center" 
                                                 VerticalAlignment="Bottom" 
                                                 HorizontalContentAlignment="Center"
                                                 Margin="16 16"
                                                 Padding="24 12"
                                                 AnimationDuration="0:0:0.5"
                                                 Foreground="{ThemeResource ApplicationForegroundThemeBrush}"
                                                 Background="{ThemeResource SystemControlBackgroundChromeMediumBrush}"
                                                 Interval="0:0:5"
                                                 IsTapEnabled="True"           
                                                 DataContext="{x:Null}"
                                                 IsTabStop="False"
                                                 CornerRadius="4"
                                                 BorderThickness="0.5"
                                                 BorderBrush="{StaticResource HohoemaLightBorderColor}"
                                 >
        <i:Interaction.Behaviors>
          <core:EventTriggerBehavior EventName="Tapped">
            <core:CallMethodAction MethodName="Dismiss" />
          </core:EventTriggerBehavior>
          <mybehavior:UINavigationTrigger Kind="Context2" IsRequireFocus="False">
            <core:CallMethodAction MethodName="Dismiss" />
          </mybehavior:UINavigationTrigger>
        </i:Interaction.Behaviors>
        <liteInAppNotification:LiteInAppNotification.ContentTemplate>
          <DataTemplate x:DataType="service1:LiteNotificationPayload">
            <uwpControls:DockPanel>
              <winui:SymbolIcon Symbol="{x:Bind Symbol}" Visibility="{x:Bind IsDisplaySymbol}" uwpControls:DockPanel.Dock="Left" />
              <TextBlock Text="{x:Bind Content}" Margin="8 0 0 0" TextWrapping="Wrap" MaxLines="2" MaxWidth="350" />
            </uwpControls:DockPanel>

          </DataTemplate>
        </liteInAppNotification:LiteInAppNotification.ContentTemplate>
      </liteInAppNotification:LiteInAppNotification>



      
    </Grid>
    <VisualStateManager.VisualStateGroups >

      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind IsDebugModeEnabled, Mode=OneWay}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ErrorTrackingUI.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- デバッグ -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind IsDebug}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="MenuFlyoutItem_OpenDebugPage.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>



      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind CoreNavigationView.PaneDisplayMode, Mode=OneWay}" EqualTo="{x:Bind muxc:NavigationViewPaneDisplayMode.Top}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="OpenAccountButton.Width" Value="40" />
            <Setter Target="OpenAccountButton.Padding" Value="7 0 0 0" />
            <Setter Target="AccountMenuFlyout.Placement" Value="BottomEdgeAlignedRight" />
            <Setter Target="OpenAccountButton.Margin" Value="8 0" />
          </VisualState.Setters>
        </VisualState>

        <!--
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind CoreNavigationView.PaneDisplayMode, Mode=OneWay}" EqualTo="{x:Bind muxc:NavigationViewPaneDisplayMode.LeftMinimal}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CoreNavigationView.PaneTitle" Value="{x:Bind PageTitle, Mode=OneWay}" />
          </VisualState.Setters>
        </VisualState>
        -->
      </VisualStateGroup>

      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind CoreNavigationView.PaneDisplayMode, Mode=OneWay}" EqualTo="{x:Bind muxc:NavigationViewPaneDisplayMode.Top}" />
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind CoreNavigationView.PaneDisplayMode, Mode=OneWay}" EqualTo="{x:Bind muxc:NavigationViewPaneDisplayMode.LeftMinimal}" />
          </VisualState.StateTriggers>
          <VisualState.Storyboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="TitleBarTextBlockTransform" Storyboard.TargetProperty="X" From="0" To="0" Duration="0:0:0.125" />
            </Storyboard>
          </VisualState.Storyboard>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind CoreNavigationView.IsPaneOpen, Mode=OneWay}" EqualTo="False" />
          </VisualState.StateTriggers>
          <VisualState.Storyboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="TitleBarTextBlockTransform" Storyboard.TargetProperty="X" From="0" To="44" Duration="0:0:0.125" />
            </Storyboard>
          </VisualState.Storyboard>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.ApplicationLayoutManager.AppLayout, Mode=OneWay}" EqualTo="{x:Bind models:ApplicationLayout.TV}" />
          </VisualState.StateTriggers>
          <VisualState.Storyboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="TitleBarTextBlockTransform" Storyboard.TargetProperty="X" From="0" To="0" Duration="0:0:0.125" />
            </Storyboard>
          </VisualState.Storyboard>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="True" />
          </VisualState.StateTriggers>
          <VisualState.Storyboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="TitleBarTextBlockTransform" Storyboard.TargetProperty="X" From="0" To="0" Duration="0:0:0.125" />
            </Storyboard>
          </VisualState.Storyboard>
        </VisualState>
      </VisualStateGroup>

      <!-- Win10タブレットの場合 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:UserInteractionModeTrigger InteractionMode="Touch" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CoreNavigationView.Margin" Value="0 0 0 0" />
            <Setter Target="TitleBarTextBlock.Opacity" Value="0" />
            <Setter Target="DraggableContent.Height" Value="0" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger EqualTo="{x:Bind _vm.ApplicationLayoutManager.AppLayout, Mode=OneWay}" Value="{x:Bind models:ApplicationLayout.TV}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CoreNavigationView.IsBackButtonVisible" Value="Collapsed" />
            <Setter Target="CoreNavigationView.Margin" Value="48 0 0 0" />
            <Setter Target="TitleBarTextBlock.Opacity" Value="0" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- TV表示時に左端に -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind CoreNavigationView.PaneDisplayMode, Mode=OneWay}" EqualTo="{x:Bind muxc:NavigationViewPaneDisplayMode.Top}" />
            <windowsTriggers:NotEqualStateTrigger Value="{x:Bind _vm.ApplicationLayoutManager.AppLayout, Mode=OneWay}" NotEqualTo="{x:Bind models:ApplicationLayout.TV}" />
          </VisualState.StateTriggers>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:CompositeStateTrigger Operator="And">
              <windowsTriggers:EqualsStateTrigger Value="{x:Bind CoreNavigationView.PaneDisplayMode, Mode=OneWay}" EqualTo="{x:Bind muxc:NavigationViewPaneDisplayMode.LeftMinimal}" />
              <windowsTriggers:EqualsStateTrigger Value="{x:Bind CoreNavigationView.IsPaneOpen, Mode=OneWay}" EqualTo="True" />
            </windowsTriggers:CompositeStateTrigger>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PaneBackgroundForTVLayout.Opacity" Value="1" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind CoreNavigationView.PaneDisplayMode, Mode=OneWay}" EqualTo="{x:Bind muxc:NavigationViewPaneDisplayMode.Auto}" />
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind CoreNavigationView.PaneDisplayMode, Mode=OneWay}" EqualTo="{x:Bind muxc:NavigationViewPaneDisplayMode.Left}" />
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind CoreNavigationView.PaneDisplayMode, Mode=OneWay}" EqualTo="{x:Bind muxc:NavigationViewPaneDisplayMode.LeftCompact}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PaneBackgroundForTVLayout.Opacity" Value="1" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="True" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- プレイヤーとページレイアウトの表示状態 -->
      <VisualStateGroup x:Name="VSG_PlayerAndMenu" xmlns:vsmEx="using:Hohoema.Views.Extensions.VIsualStateManager" vsmEx:VisualStateManagerExtensions.DebugCurrentState="True">
        <!-- プレイヤーを画面全体表示 -->
        <VisualState x:Name="VS_PlayerFill">
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.PrimaryViewPlayerManager.DisplayMode, Mode=OneWay}" EqualTo="{x:Bind servicesPlayer:PlayerDisplayMode.CompactOverlay}" />
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.PrimaryViewPlayerManager.DisplayMode, Mode=OneWay}" EqualTo="{x:Bind servicesPlayer:PlayerDisplayMode.FullScreen}" />
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.PrimaryViewPlayerManager.DisplayMode, Mode=OneWay}" EqualTo="{x:Bind servicesPlayer:PlayerDisplayMode.FillWindow}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerLayout.Visibility" Value="Visible" />
            <Setter Target="CoreNavigationView.Visibility" Value="Collapsed" />
            <Setter Target="TitleBarTextBlock.Visibility" Value="Collapsed" />
            <Setter Target="DraggableContent.Background" Value="Transparent" />

            <Setter Target="LiteInAppNotification.HorizontalAlignment" Value="Center" />
            <Setter Target="LiteInAppNotification.VerticalAlignment" Value="Top" />
            <Setter Target="LiteInAppNotification.Margin" Value="16 120 16 0" />
          </VisualState.Setters>
        </VisualState>
        <!-- プレイヤーを小窓表示（TV） -->
        <VisualState x:Name="VS_PlayerWIW_TV">
          <VisualState.StateTriggers>
            <windowsTriggers:CompositeStateTrigger Operator="And">
              <windowsTriggers:EqualsStateTrigger EqualTo="{x:Bind _vm.ApplicationLayoutManager.AppLayout, Mode=OneWay}" Value="{x:Bind models:ApplicationLayout.TV}" />
              <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.PrimaryViewPlayerManager.DisplayMode, Mode=OneWay}" EqualTo="{x:Bind servicesPlayer:PlayerDisplayMode.WindowInWindow}" />
            </windowsTriggers:CompositeStateTrigger>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerLayout.Visibility" Value="Visible" />
            <Setter Target="PlayerLayout.Width" Value="426" />
            <Setter Target="PlayerLayout.Height" Value="240" />
            <Setter Target="PlayerLayout.Margin" Value="0 0 8 0" />
            <Setter Target="PlayerLayout.VerticalAlignment" Value="Bottom" />
            <Setter Target="PlayerLayout.HorizontalAlignment" Value="Right" />
          </VisualState.Setters>
        </VisualState>

        <!-- プレイヤーを小窓表示（Desktop） -->
        <VisualState x:Name="VS_PlayerWIW_Desktop">
          <VisualState.StateTriggers>
            <windowsTriggers:CompositeStateTrigger Operator="And">
              <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.ApplicationLayoutManager.AppLayout, Mode=OneWay}" EqualTo="{x:Bind models:ApplicationLayout.Desktop}" />
              <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.PrimaryViewPlayerManager.DisplayMode, Mode=OneWay}" EqualTo="{x:Bind servicesPlayer:PlayerDisplayMode.WindowInWindow}" />
            </windowsTriggers:CompositeStateTrigger>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerLayout.Visibility" Value="Visible" />
            <Setter Target="PlayerLayout.Width" Value="426" />
            <Setter Target="PlayerLayout.Height" Value="240" />
            <Setter Target="PlayerLayout.Margin" Value="0 0 8 0" />
            <Setter Target="PlayerLayout.VerticalAlignment" Value="Bottom" />
            <Setter Target="PlayerLayout.HorizontalAlignment" Value="Right" />
          </VisualState.Setters>
        </VisualState>
        <!-- プレイヤーを小窓表示（Tablet） -->
        <VisualState x:Name="VS_PlayerWIW_Tablet">
          <VisualState.StateTriggers>
            <windowsTriggers:CompositeStateTrigger Operator="And">
              <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.ApplicationLayoutManager.AppLayout, Mode=OneWay}" EqualTo="{x:Bind models:ApplicationLayout.Tablet}" />
              <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.PrimaryViewPlayerManager.DisplayMode, Mode=OneWay}" EqualTo="{x:Bind servicesPlayer:PlayerDisplayMode.WindowInWindow}" />
            </windowsTriggers:CompositeStateTrigger>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="TitleBarTextBlock.Visibility" Value="Collapsed" />
            <Setter Target="DraggableContent.Background" Value="Transparent" />
            <Setter Target="PlayerLayout.Visibility" Value="Visible" />
            <Setter Target="PlayerLayout.Height" Value="282" />
            <Setter Target="MobilePlayerTopMargin.Visibility" Value="Visible" />
            <Setter Target="MobilePlayerTopMargin.Height" Value="282" />
            <Setter Target="PlayerLayout.VerticalAlignment" Value="Top" />

          </VisualState.Setters>
        </VisualState>
        <!-- プレイヤーを小窓表示（Mobile） -->
        <VisualState x:Name="VS_PlayerWIW_Mobile">
          <VisualState.StateTriggers>
            <windowsTriggers:CompositeStateTrigger Operator="And">
              <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.ApplicationLayoutManager.AppLayout, Mode=OneWay}" EqualTo="{x:Bind models:ApplicationLayout.Mobile}" />
              <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.PrimaryViewPlayerManager.DisplayMode, Mode=OneWay}" EqualTo="{x:Bind servicesPlayer:PlayerDisplayMode.WindowInWindow}" />
            </windowsTriggers:CompositeStateTrigger>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="TitleBarTextBlock.Visibility" Value="Collapsed" />
            <Setter Target="DraggableContent.Background" Value="Transparent" />
            <Setter Target="PlayerLayout.Visibility" Value="Visible" />
            <Setter Target="PlayerLayout.Height" Value="282" />
            <Setter Target="MobilePlayerTopMargin.Visibility" Value="Visible" />
            <Setter Target="MobilePlayerTopMargin.Height" Value="282" />
            <Setter Target="PlayerLayout.VerticalAlignment" Value="Top" />
          </VisualState.Setters>
        </VisualState>
        <!-- TV -->
        <VisualState x:Name="VS_TV">
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.ApplicationLayoutManager.AppLayout, Mode=OneWay}" EqualTo="{x:Bind models:ApplicationLayout.TV}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
          </VisualState.Setters>
        </VisualState>
        <!-- Desktop -->
        <VisualState x:Name="VS_Desktop">
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.ApplicationLayoutManager.AppLayout, Mode=OneWay}" EqualTo="{x:Bind models:ApplicationLayout.Desktop}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
          </VisualState.Setters>
        </VisualState>
        <!-- Tablet -->
        <VisualState x:Name="VS_Tablet">
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.ApplicationLayoutManager.AppLayout, Mode=OneWay}" EqualTo="{x:Bind models:ApplicationLayout.Tablet}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
          </VisualState.Setters>
        </VisualState>
        <!-- Mobile -->
        <VisualState x:Name="VS_Mobile">
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.ApplicationLayoutManager.AppLayout, Mode=OneWay}" EqualTo="{x:Bind models:ApplicationLayout.Mobile}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- メニューの表示状態 -->
      <VisualStateGroup x:Name="VSG_Pane" 
                        xmlns:vsmEx="using:Hohoema.Views.Extensions.VIsualStateManager"
                        vsmEx:VisualStateManagerExtensions.DebugCurrentState="True"
                        >
        <!-- TV On Focus -->
        <VisualState x:Name="VS_TVAndOnFocus">
          <VisualState.StateTriggers>
            <windowsTriggers:CompositeStateTrigger Operator="And">
              <StateTrigger IsActive="{x:Bind _isFocusMenu.Value, Mode=OneWay}" />
              <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.ApplicationLayoutManager.AppLayout, Mode=OneWay}" EqualTo="{x:Bind models:ApplicationLayout.TV}" />
            </windowsTriggers:CompositeStateTrigger>
          </VisualState.StateTriggers>
          <VisualState.Setters>
          </VisualState.Setters>
          <VisualState.Storyboard>
            <Storyboard>
              <!--
              <DoubleAnimation Storyboard.TargetName="PaneLayout" Storyboard.TargetProperty="Opacity" From="0.5" To="1.0" Duration="0:0:0.125" />
              -->
            </Storyboard>
          </VisualState.Storyboard>
        </VisualState>
        <!-- TV -->
        <VisualState x:Name="VS_TopMenu_TV">
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.ApplicationLayoutManager.AppLayout, Mode=OneWay}" EqualTo="{x:Bind models:ApplicationLayout.TV}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
          </VisualState.Setters>
          <VisualState.Storyboard>
            <Storyboard>
              <!--
              <DoubleAnimation Storyboard.TargetName="PaneLayout" Storyboard.TargetProperty="Opacity" From="1.0" To="0.5" Duration="0:0:0.125" />
              -->
            </Storyboard>
          </VisualState.Storyboard>
        </VisualState>
        <!-- Desktop -->
        <VisualState x:Name="VS_TopMenu_Mouse">
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.ApplicationLayoutManager.AppLayout, Mode=OneWay}" EqualTo="{x:Bind models:ApplicationLayout.Desktop}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CoreNavigationView.OpenPaneLength" Value="{StaticResource SideMenuPaneLength}" />
          </VisualState.Setters>
        </VisualState>
        <!-- Table -->
        <VisualState x:Name="VS_TopMenu_Tablet">
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.ApplicationLayoutManager.AppLayout, Mode=OneWay}" EqualTo="{x:Bind models:ApplicationLayout.Tablet}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CoreNavigationView.OpenPaneLength" Value="{StaticResource SideMenuPaneLength}" />
          </VisualState.Setters>
        </VisualState>
        <!-- Mobile -->
        <VisualState x:Name="VS_TopMenu_Mobile">
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.ApplicationLayoutManager.AppLayout, Mode=OneWay}" EqualTo="{x:Bind models:ApplicationLayout.Mobile}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CoreNavigationView.OpenPaneLength" Value="{StaticResource SideMenuPaneLength}" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- レイアウトモード -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.ApplicationLayoutManager.AppLayout, Mode=OneWay}" EqualTo="{x:Bind models:ApplicationLayout.TV}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:DeviceFamilyStateTrigger DeviceFamily="Desktop" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
          </VisualState.Setters>
        </VisualState>
        <!-- フルスクリーン時はステータスバーが非表示になる -->
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:CompositeStateTrigger Operator="And">
              <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.ApplicationLayoutManager.AppLayout, Mode=OneWay}" EqualTo="{x:Bind models:ApplicationLayout.Mobile}" />
              <windowsTriggers:FullScreenModeTrigger />
            </windowsTriggers:CompositeStateTrigger>
          </VisualState.StateTriggers>
        </VisualState>
        <!-- モバイルかつ横持ち状態 -->
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:CompositeStateTrigger Operator="And">
              <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.ApplicationLayoutManager.AppLayout, Mode=OneWay}" EqualTo="{x:Bind models:ApplicationLayout.Mobile}" />
              <windowsTriggers:OrientationStateTrigger Orientation="Landscape" />
            </windowsTriggers:CompositeStateTrigger>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <!--
            <Setter Target="PaneLayout.Margin" Value="40 0 0 0" />
            -->
          </VisualState.Setters>
        </VisualState>
        <!-- モバイルかつ縦持ち状態 -->
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:CompositeStateTrigger Operator="And">
              <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.ApplicationLayoutManager.AppLayout, Mode=OneWay}" EqualTo="{x:Bind models:ApplicationLayout.Mobile}" />
              <windowsTriggers:OrientationStateTrigger Orientation="Portrait" />
            </windowsTriggers:CompositeStateTrigger>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <!--
            <Setter Target="PaneLayout.Margin" Value="0 24 0 0" />
            -->
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- アプリのサービス状態 -->
      <VisualStateGroup>
        <VisualState x:Name="OfflineState">
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.NiconicoSession.ServiceStatus, Mode=OneWay}" EqualTo="{x:Bind models:HohoemaAppServiceLevel.Offline}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="MenuFlyoutItem_Login.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
        <VisualState x:Name="ServiceUnavailableState">
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.NiconicoSession.ServiceStatus, Mode=OneWay}" EqualTo="{x:Bind models:HohoemaAppServiceLevel.ServiceUnavailable}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="MenuFlyoutItem_Login.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
        <VisualState x:Name="WithoutLoggedInState">
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.NiconicoSession.ServiceStatus, Mode=OneWay}" EqualTo="{x:Bind models:HohoemaAppServiceLevel.WithoutLoggedIn}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ServiceStateText.Visibility" Value="Collapsed" />
            <Setter Target="MenuFlyoutItem_Login.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
        <VisualState x:Name="LoggedInState">
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{x:Bind _vm.NiconicoSession.ServiceStatus, Mode=OneWay}" EqualTo="{x:Bind models:HohoemaAppServiceLevel.LoggedIn}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ServiceStateText.Visibility" Value="Collapsed" />
            <Setter Target="MenuFlyoutItem_OpenAccountInfo.Visibility" Value="Visible" />
            <Setter Target="MenuFlyoutItem_OpenFollowPage.Visibility" Value="Visible" />
            <Setter Target="MenuFlyoutItem_Logout.Visibility" Value="Visible" />
            <Setter Target="CoreNavigationView.MenuItemsSource" Value="{x:Bind _vm.MenuItems_LoggedIn}" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- 検索ボックス -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <mytrigger:FocusTrigger Target="{Binding ElementName=SearchTextBox}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SearchSubmitWithEnterKeyTrigger.IsEnabled" Value="True" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
    </VisualStateManager.VisualStateGroups>
  </Grid>
  
</UserControl>
