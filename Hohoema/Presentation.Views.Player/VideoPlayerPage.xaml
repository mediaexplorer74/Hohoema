<Page x:Class="Hohoema.Presentation.Views.Player.VideoPlayerPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:local="using:Hohoema.Presentation.Views.Player"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      mc:Ignorable="d"
      xmlns:i="using:Microsoft.Xaml.Interactivity"
      xmlns:core="using:Microsoft.Xaml.Interactions.Core"
      xmlns:toolkit="using:WinRTXamlToolkit.Controls"
      xmlns:toolkitext="using:WinRTXamlToolkit.Controls.Extensions"
      xmlns:mybehavior="using:Hohoema.Presentation.Views.Behaviors"
      xmlns:viewmodel="using:Hohoema.Presentation.ViewModels"
      xmlns:sidepaneVM="using:Hohoema.Presentation.ViewModels.Player.PlayerSidePaneContent"
      xmlns:logicalTrigger="using:AdaptiveTriggerLibrary.Triggers.LogicalTriggers"
      xmlns:connectivityTrigger="using:AdaptiveTriggerLibrary.Triggers.ConnectivityTriggers"
      xmlns:intractionTrigger="using:AdaptiveTriggerLibrary.Triggers.UserInteractionTriggers"
      xmlns:uiTrigger="using:AdaptiveTriggerLibrary.Triggers.UserInterfaceTriggers"
      xmlns:myTrigger="using:Hohoema.Presentation.Views.StateTrigger"
      xmlns:hardTrigger="using:AdaptiveTriggerLibrary.Triggers.HardwareInterfaceTriggers"
      xmlns:media="using:Microsoft.Xaml.Interactions.Media"
      xmlns:uwpui="using:Microsoft.Toolkit.Uwp.UI"
      xmlns:uwpControls="using:Microsoft.Toolkit.Uwp.UI.Controls"
      xmlns:iconPack="using:MahApps.Metro.IconPacks"
      xmlns:model="using:Hohoema.Models.Domain"
      xmlns:mvvm="using:Prism.Mvvm"
      xmlns:winui="using:Microsoft.UI.Xaml.Controls"
      xmlns:controls="using:Hohoema.Presentation.Views.Controls"
      xmlns:system1="using:System"
      xmlns:templateselector="using:Hohoema.Presentation.Views.TemplateSelector"
      xmlns:windowsTriggers="using:WindowsStateTriggers" 
      xmlns:players="using:Hohoema.Presentation.Views.Player"
      xmlns:i18nExt="using:I18NPortable.Xaml.Extensions"
      xmlns:myExt="using:Hohoema.Presentation.Views.Extensions" 
      xmlns:playerUI="using:Hohoema.Presentation.Views.Player.VideoPlayerUI"
      DataContext="{x:Null}"
      x:Name="RootLayout"
      NavigationCacheMode="Enabled"
      d:DesignHeight="300"
      d:DesignWidth="400">

  <Grid x:Name="LayoutRoot" Background="{ThemeResource AppBarBorderThemeBrush}">

    <!-- Media Control -->
    <Grid x:Name="MediaControl" >
      
      <!-- 映像表示 -->
      <MediaPlayerElement x:Name="MediaPlayerElement" AutoPlay="True">
        <i:Interaction.Behaviors>
          <mybehavior:MediaPlayerSetter MediaPlayer="{Binding MediaPlayer}" />
          <mybehavior:MediaPlayerElementContentHeightGetter ContentHeight="{x:Bind CommentRederer.Height, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
        </i:Interaction.Behaviors>
      </MediaPlayerElement>
      <!-- コメント表示 -->
      <local:CommentRenderer x:Name="CommentRederer" MediaPlayer="{Binding MediaPlayer}" Comments="{Binding CommentPlayer.DisplayingComments}" Visibility="{Binding PlayerSettings.IsCommentDisplay_Video, Converter={StaticResource BooleanToVisibility}}" CommentSizeScale="{Binding PlayerSettings.DefaultCommentFontScale}" CommentDefaultColor="{Binding PlayerSettings.CommentColor}" DefaultDisplayDuration="{Binding PlayerSettings.CommentDisplayDuration}" Opacity="{Binding PlayerSettings.CommentOpacity, Mode=OneWay}" />
      <!-- 読み込み中表示 -->
      <ProgressRing Visibility="{Binding ObservableMediaPlayer.NowBuffering.Value, Mode=OneWay, Converter={StaticResource BooleanToVisibility}}" IsActive="{Binding ObservableMediaPlayer.NowBuffering.Value, Mode=OneWay}" Width="48" Height="48" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0 88 24 0" />

      <!-- コントロールUI -->
      <uwpControls:SwitchPresenter x:Name="PlayerUISwitchPresenter" >
        <uwpControls:Case Value="Desktop" IsDefault="True">
          <playerUI:DesktopPlayerUI DataContext="{Binding}" MediaPlayer="{Binding MediaPlayer}" MediaControlWidth="{x:Bind MediaControlWidth, Mode=OneWay}" />
        </uwpControls:Case>
        <uwpControls:Case Value="DesktopNallow">
          <playerUI:NallowPlayerUI DataContext="{Binding}" MediaPlayer="{Binding MediaPlayer}" MediaControlWidth="{x:Bind MediaControlWidth, Mode=OneWay}" />
        </uwpControls:Case>
      </uwpControls:SwitchPresenter>

      <Grid>
        <!-- 有料動画・サポートされていないプロトコル・動画形式・チャンネル会員限定動画・プレミアム会員限定動画 -->
        <Border HorizontalAlignment="Left" VerticalAlignment="Top" Margin="32 64" Visibility="{Binding IsNotSupportVideoType, Converter={StaticResource BooleanToVisibility}}" Background="{StaticResource AppBarItemPointerOverBackgroundThemeBrush}" Padding="16">
          <Grid MinWidth="300">
            <iconPack:PackIconMaterial Kind="VideoOff" Margin="16 8 32 8" Width="32" Height="32" toolkit:DockPanel.Dock="Left" VerticalAlignment="Center" />
            <StackPanel Spacing="16" HorizontalAlignment="Right">
              <TextBlock Text="{i18nExt:Localize Key=CanNotPlay}" VerticalAlignment="Center" Style="{StaticResource SubtitleTextBlockStyle}" Margin="0 0 0 0" />
              <TextBlock VerticalAlignment="Center" TextWrapping="Wrap" HorizontalAlignment="Right" >
                        <Run Text="{Binding CannotPlayReason}" />
              </TextBlock>
              <Button Content="{i18nExt:Localize Key=OpenWithBrowser}"
                            Command="{Binding OpenLinkCommand}" 
                            CommandParameter="{Binding VideoInfo}"
                            Style="{ThemeResource AccentButtonStyle}" 
                            Height="48"
                            HorizontalAlignment="Right"
                            />
            </StackPanel>
          </Grid>
        </Border>
      </Grid>
    </Grid>

    <VisualStateManager.VisualStateGroups>


      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:CompactOverlayViewModeTrigger myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind RootLayout}" />
            <myTrigger:WindowInWindowViewModeTrigger myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind RootLayout}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerUISwitchPresenter.Value" Value="DesktopNallow" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>







    </VisualStateManager.VisualStateGroups>
    
    
  </Grid>
</Page>
