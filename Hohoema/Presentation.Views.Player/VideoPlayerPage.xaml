<Page x:Class="Hohoema.Presentation.Views.Player.VideoPlayerPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:local="using:Hohoema.Presentation.Views.Player"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      mc:Ignorable="d"
      xmlns:i="using:Microsoft.Xaml.Interactivity"
      xmlns:core="using:Microsoft.Xaml.Interactions.Core"
      xmlns:models="using:Hohoema.Models.Domain.Application"
      xmlns:toolkit="using:WinRTXamlToolkit.Controls"
      xmlns:toolkitext="using:WinRTXamlToolkit.Controls.Extensions"
      xmlns:mybehavior="using:Hohoema.Presentation.Views.Behaviors"
      xmlns:viewmodel="using:Hohoema.Presentation.ViewModels"
      xmlns:sidepaneVM="using:Hohoema.Presentation.ViewModels.Player.PlayerSidePaneContent"
      xmlns:logicalTrigger="using:AdaptiveTriggerLibrary.Triggers.LogicalTriggers"
      xmlns:connectivityTrigger="using:AdaptiveTriggerLibrary.Triggers.ConnectivityTriggers"
      xmlns:intractionTrigger="using:AdaptiveTriggerLibrary.Triggers.UserInteractionTriggers"
      xmlns:uiTrigger="using:AdaptiveTriggerLibrary.Triggers.UserInterfaceTriggers"
      xmlns:myTrigger="using:Hohoema.Presentation.Views.StateTrigger"
      xmlns:hardTrigger="using:AdaptiveTriggerLibrary.Triggers.HardwareInterfaceTriggers"
      xmlns:media="using:Microsoft.Xaml.Interactions.Media"
      xmlns:uwpui="using:Microsoft.Toolkit.Uwp.UI"
      xmlns:uwpControls="using:Microsoft.Toolkit.Uwp.UI.Controls"
      xmlns:iconPack="using:MahApps.Metro.IconPacks"
      xmlns:model="using:Hohoema.Models.Domain"
      xmlns:mvvm="using:Prism.Mvvm"
      xmlns:winui="using:Microsoft.UI.Xaml.Controls"
      xmlns:controls="using:Hohoema.Presentation.Views.Controls"
      xmlns:system1="using:System"
      xmlns:templateselector="using:Hohoema.Presentation.Views.TemplateSelector"
      xmlns:windowsTriggers="using:WindowsStateTriggers" 
      xmlns:players="using:Hohoema.Presentation.Views.Player"
      xmlns:i18nExt="using:I18NPortable.Xaml.Extensions"
      xmlns:myExt="using:Hohoema.Presentation.Views.Extensions"
      xmlns:muxc="using:Microsoft.UI.Xaml" 
      xmlns:playerModels="using:Hohoema.Models.UseCase.Niconico.Player"
      x:Name="RootLayout"
      NavigationCacheMode="Required"
      d:DesignHeight="300"
      d:DesignWidth="400">
  <UserControl.Resources>

    <MenuFlyout x:Key="VideoOptionsFlyout">
      <MenuFlyoutItem Text="{i18nExt:Localize Key=PlayPauseToggleButtonTitle}" Command="{Binding VideoTogglePlayPauseCommand}" />
      <ToggleMenuFlyoutItem IsChecked="{Binding ObservableMediaPlayer.IsMuted.Value, Mode=TwoWay}" Text="{i18nExt:Localize Key=Mute}" />
      <ToggleMenuFlyoutItem IsChecked="{x:Bind _vm.PlayerSettings.IsCommentDisplay_Video, Mode=TwoWay, Converter={StaticResource BoolNegation}}" Text="{i18nExt:Localize Key=ToggleHideComment}" />
      <MenuFlyoutSubItem Text="{Binding Source=Quality, Converter={StaticResource LocalizeConverter}}" Visibility="{Binding AvailableQualities, Converter={StaticResource CollectionVisibilityConverter}}" x:Name="VideoQualityMenuFlyoutSubImte">
        <i:Interaction.Behaviors>
          <mybehavior:MenuFlyoutSubItemItemsSetter ItemsSource="{x:Bind _vm.AvailableQualities, Mode=OneWay}" CustomObjectToTag="{x:Bind _vm, Mode=OneWay}">
            <mybehavior:MenuFlyoutSubItemItemsSetter.ItemTemplate>
              <DataTemplate>
                <MenuFlyoutItem IsEnabled="{Binding IsAvailable}" Text="{Binding Quality, Converter={StaticResource LocalizeConverter}}" Command="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Tag.ChangeVideoQualityCommand}" CommandParameter="{Binding}"></MenuFlyoutItem>
              </DataTemplate>
            </mybehavior:MenuFlyoutSubItemItemsSetter.ItemTemplate>
          </mybehavior:MenuFlyoutSubItemItemsSetter>
        </i:Interaction.Behaviors>
      </MenuFlyoutSubItem>
      <MenuFlyoutSubItem Text="{i18nExt:Localize Key=PlaybackRate}">
        <MenuFlyoutSeparator />
        <MenuFlyoutItem Text="200%" Command="{x:Bind _vm.SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>2.0</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutItem Text="175%" Command="{x:Bind _vm.SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>1.75</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutItem Text="150%" Command="{x:Bind _vm.SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>1.5</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutItem Text="125%" Command="{x:Bind _vm.SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>1.25</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutSeparator />
        <MenuFlyoutItem Text="75%" Command="{x:Bind _vm.SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>0.75</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutItem Text="50%" Command="{x:Bind _vm.SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>0.5</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutItem Text="25%" Command="{x:Bind _vm.SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>0.25</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
      </MenuFlyoutSubItem>
      <MenuFlyoutSeparator />
      <MenuFlyoutItem x:Name="FullscreenButton_Menu" Command="{x:Bind _vm.PlayerView.ToggleFullScreenCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="{i18nExt:Localize Key=FullScreen}" Icon="FullScreen"></MenuFlyoutItem>
      <MenuFlyoutItem x:Name="CompactOverlayButton_Menu" Command="{x:Bind _vm.PlayerView.ToggleCompactOverlayCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="{i18nExt:Localize Key=CompactOverlay}"></MenuFlyoutItem>
      <MenuFlyoutItem x:Name="SmallWindowButton_Menu" Command="{x:Bind _vm.PrimaryViewPlayerManager.ToggleFillOrWindowInWindowCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="{i18nExt:Localize Key=WindowInWindow}"></MenuFlyoutItem>
      <MenuFlyoutItem x:Name="DisplayWithSecondaryViewButton_Menu" Command="{x:Bind _vm.TogglePlayerDisplayViewCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="{i18nExt:Localize Key=PlayWithSecondaryView}"></MenuFlyoutItem>
      <ToggleMenuFlyoutItem x:Name="ForceRotateToggleButton_Menu" IsChecked="{x:Bind _vm.PlayerSettings.IsForceLandscape, Mode=TwoWay}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="{i18nExt:Localize Key=FixToLandscape}" Icon="Orientation"></ToggleMenuFlyoutItem>
    </MenuFlyout>
    <local:PlayerSidePaneContentTemplateSelecter x:Key="PlayerSidePaneContentTemplateSelecter">
      <local:PlayerSidePaneContentTemplateSelecter.Empty>
        <DataTemplate>
          <!-- empty -->
        </DataTemplate>
      </local:PlayerSidePaneContentTemplateSelecter.Empty>
      <local:PlayerSidePaneContentTemplateSelecter.Playlist>
        <DataTemplate>
          <local:PlaylistSidePaneContent />
        </DataTemplate>
      </local:PlayerSidePaneContentTemplateSelecter.Playlist>
      <local:PlayerSidePaneContentTemplateSelecter.Comments>
        <DataTemplate>
          <local:VideoCommentSidePaneContent />
        </DataTemplate>
      </local:PlayerSidePaneContentTemplateSelecter.Comments>
      <local:PlayerSidePaneContentTemplateSelecter.Settings>
        <DataTemplate>
          <local:VideoSettingsSidePaneContent />
        </DataTemplate>
      </local:PlayerSidePaneContentTemplateSelecter.Settings>
      <local:PlayerSidePaneContentTemplateSelecter.RelatedVideos>
        <DataTemplate>
          <local:RelatedVideosSidePaneContent />
        </DataTemplate>
      </local:PlayerSidePaneContentTemplateSelecter.RelatedVideos>
    </local:PlayerSidePaneContentTemplateSelecter>
  </UserControl.Resources>
  <Grid x:Name="LayoutRoot">
    <toolkit:LayoutTransformControl x:Name="LayoutTransform">
      <toolkit:LayoutTransformControl.Transform>
        <RotateTransform x:Name="LayoutRotateTranform" Angle="0" />
      </toolkit:LayoutTransformControl.Transform>
      <SplitView PanePlacement="Right" x:Name="PlayerSplitView" IsTabStop="False" IsPaneOpen="{x:Bind _vm.PlayerSplitViewIsPaneOpen, Mode=TwoWay}"
                 PaneBackground="{ThemeResource ApplicationContentBackgroundBrush}"
                 >
        <i:Interaction.Behaviors>
          <!-- 子要素方向にあるContentControl にフォーカスが移ると KeyboardAccelerator のイベントを吸ってしまうので IsEnabledを変更してフォーカスを剥がす -->
          <core:EventTriggerBehavior EventName="PaneOpening">
            <core:ChangePropertyAction TargetObject="{x:Bind SidePaneContentControl}" PropertyName="IsEnabled" Value="True" />
          </core:EventTriggerBehavior>
          <!-- サイドペインが閉じられたら コンテンツVMをリセット -->
          <core:EventTriggerBehavior EventName="PaneClosed">
            <core:ChangePropertyAction TargetObject="{x:Bind _vm}" PropertyName="SidePaneType" Value="{x:Bind players:PlayerSidePaneContentType.None}" />
            <core:ChangePropertyAction TargetObject="{x:Bind SidePaneContentControl}" PropertyName="IsEnabled" Value="False" />
          </core:EventTriggerBehavior>
        </i:Interaction.Behaviors>
        <SplitView.Pane>
          <Grid x:Name="PlayerSidePaneLayout">
            <ContentControl x:Name="SidePaneContentControl" IsEnabled="False" Content="{x:Bind _vm.SidePaneViewModel, Mode=OneWay}" ContentTemplateSelector="{StaticResource PlayerSidePaneContentTemplateSelecter}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" />
          </Grid>
        </SplitView.Pane>
        <SplitView.Content>
          <!-- Media Control -->
          <Grid x:Name="MediaControl" ContextFlyout="{StaticResource VideoOptionsFlyout}" ManipulationMode="TranslateX"
                KeyboardAcceleratorPlacementMode="Hidden"
                >
            <Grid.KeyboardAccelerators>
              <KeyboardAccelerator x:Name="CommentWriteBeginKeyboardTrigger" Key="C">
                <i:Interaction.Behaviors>
                  <core:EventTriggerBehavior EventName="Invoked">
                    <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="True" />
                    <mybehavior:SetFocus TargetObject="{x:Bind CommentTextBox}" Delay="00:00:00" />
                  </core:EventTriggerBehavior>
                </i:Interaction.Behaviors>
              </KeyboardAccelerator>
              
              <KeyboardAccelerator x:Name="CommentSubmitKeyboardTrigger" Key="Enter" IsEnabled="False">
                <i:Interaction.Behaviors>
                  <core:EventTriggerBehavior EventName="Invoked">
                    <core:InvokeCommandAction Command="{x:Bind _vm.CommentPlayer.CommentSubmitCommand}" />
                  </core:EventTriggerBehavior>
                </i:Interaction.Behaviors>
              </KeyboardAccelerator>

              <!-- スペースキー入力で再生停止の切り替え-->
              <KeyboardAccelerator x:Name="PlayPauseToggleKeyboardTrigger" Key="Space" Invoked="PlayPauseToggleKeyboardTrigger_Invoked" />

              <KeyboardAccelerator x:Name="VideoForwardKeyboardTrigger" Key="Right">
                <i:Interaction.Behaviors>
                  <core:EventTriggerBehavior EventName="Invoked">
                    <core:InvokeCommandAction Command="{x:Bind _vm.SeekCommand}" CommandParameter="{x:Bind ForwardSeekTime}" />
                  </core:EventTriggerBehavior>
                </i:Interaction.Behaviors>
              </KeyboardAccelerator>
              <KeyboardAccelerator x:Name="VideoBackKeyboardTrigger" Key="Left">
                <i:Interaction.Behaviors>
                  <core:EventTriggerBehavior EventName="Invoked">
                    <core:InvokeCommandAction Command="{x:Bind _vm.SeekCommand}" CommandParameter="{x:Bind PreviewSeekTime}" />
                  </core:EventTriggerBehavior>
                </i:Interaction.Behaviors>
              </KeyboardAccelerator>
            </Grid.KeyboardAccelerators>
            <i:Interaction.Behaviors>
              <!-- 再生停止時にUIを表示 -->
              <core:DataTriggerBehavior Binding="{Binding ObservableMediaPlayer.NowPlaying.Value, Mode=OneWay}" Value="False" ComparisonCondition="Equal">
                <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="True" />
              </core:DataTriggerBehavior>
              <core:DataTriggerBehavior Binding="{Binding ObservableMediaPlayer.NowPlaying.Value, Mode=OneWay}" Value="True" ComparisonCondition="Equal">
                <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="False" />
              </core:DataTriggerBehavior>
              <!-- 左右スワイプでシーク -->
              <mybehavior:Swipe x:Name="SeekSwipe" SwipeCommand="{x:Bind _vm.SeekCommand}" SwipeAmountConverter="{StaticResource SwipeSeekValueToTimeSpan}" SwipeAmountScale="0.15" SwipeEdgeOfPlay="48" />
              <!-- マウスの非表示 -->
              <mybehavior:PointerCursolAutoHideBehavior x:Name="AutoHideCursor" IsAutoHideEnabled="False" AutoHideDelay="0:0:1.25" />
              <core:EventTriggerBehavior EventName="Loaded">
                <mybehavior:SetFocus TargetObject="{Binding ElementName=RootLayout}" />
              </core:EventTriggerBehavior>
                           
              <mybehavior:MouseWheelTrigger>
                <mybehavior:MouseWheelTrigger.UpActions>
                  <core:InvokeCommandAction Command="{x:Bind _vm.VolumeUpCommand}" CommandParameter="{Binding PlayerSettings.SoundVolumeChangeFrequency}" />
                </mybehavior:MouseWheelTrigger.UpActions>
                <mybehavior:MouseWheelTrigger.DownActions>
                  <core:InvokeCommandAction Command="{x:Bind _vm.VolumeDownCommand}" CommandParameter="{Binding PlayerSettings.SoundVolumeChangeFrequency}" />
                </mybehavior:MouseWheelTrigger.DownActions>
              </mybehavior:MouseWheelTrigger>
              <mybehavior:UINavigationTrigger Kind="Cancel" x:Name="ControllerToggleDisplayUITrigger" IsEnabled="True">
                <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="{x:Bind IsDisplayControlUI, Mode=OneWay, Converter={StaticResource BoolNegation}}" />
              </mybehavior:UINavigationTrigger>
              <mybehavior:UINavigationTrigger x:Name="ConrollerHidePlayerTrigger" Kind="Cancel" Hold="True" IsEnabled="True">
                <core:InvokeCommandAction Command="{x:Bind _vm.PrimaryViewPlayerManager.CloseCommand}" />
              </mybehavior:UINavigationTrigger>
              <mybehavior:UINavigationTrigger x:Name="ControllerSeekPreviewTrigger" Kind="PageLeft" IsEnabled="True">
                <core:InvokeCommandAction Command="{x:Bind _vm.SeekCommand}" CommandParameter="{x:Bind PreviewSeekTime}" />
              </mybehavior:UINavigationTrigger>
              <mybehavior:UINavigationTrigger x:Name="ControllerSeekForwardTrigger" Kind="PageRight" IsEnabled="True">
                <core:InvokeCommandAction Command="{x:Bind _vm.SeekCommand}" CommandParameter="{x:Bind ForwardSeekTime}" />
              </mybehavior:UINavigationTrigger>
              <mybehavior:UINavigationTrigger x:Name="ControllerTogglePlayPauseTrigger" Kind="Context1" IsEnabled="True">
                <core:InvokeCommandAction Command="{x:Bind _vm.VideoTogglePlayPauseCommand}" />
              </mybehavior:UINavigationTrigger>
            </i:Interaction.Behaviors>
            <!-- 映像表示 -->
            <MediaPlayerElement x:Name="MediaPlayerElement" AutoPlay="True">
              <i:Interaction.Behaviors>
                <mybehavior:MediaPlayerSetter MediaPlayer="{x:Bind _vm.MediaPlayer}" />
                <mybehavior:MediaPlayerElementContentHeightGetter ContentHeight="{x:Bind CommentRederer.Height, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
              </i:Interaction.Behaviors>
            </MediaPlayerElement>
            <!-- コメント表示 -->
            <local:CommentRenderer 
              x:Name="CommentRederer" 
              MediaPlayer="{x:Bind _vm.MediaPlayer}" 
              Comments="{x:Bind _vm.CommentPlayer.DisplayingComments, Mode=OneWay}" 
              Visibility="{x:Bind _vm.PlayerSettings.IsCommentDisplay_Video, Mode=OneWay, Converter={StaticResource BooleanToVisibility}}" 
              CommentSizeScale="{x:Bind _vm.PlayerSettings.DefaultCommentFontScale, Mode=OneWay}" 
              CommentDefaultColor="{x:Bind _vm.PlayerSettings.CommentColor, Mode=OneWay}"
              DefaultDisplayDuration="{x:Bind _vm.PlayerSettings.CommentDisplayDuration, Mode=OneWay}" 
              Opacity="{x:Bind _vm.PlayerSettings.CommentOpacity, Mode=OneWay}"
              />
            <!-- 読み込み中表示 -->
            <winui:ProgressRing Visibility="{x:Bind _vm. ObservableMediaPlayer.NowBuffering.Value, Mode=OneWay, Converter={StaticResource BooleanToVisibility}}" IsActive="{Binding ObservableMediaPlayer.NowBuffering.Value, Mode=OneWay}" Width="64" Height="64" HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="0.9" IsTabStop="False" />
            <!-- ウィンドウ非アクティブ時に画面全体をマウス移動の反応対象にするためのコリジョン-->
            <Border x:Name="WindowDeactiveMouseMoveDetectWall" Background="Transparent" Visibility="Collapsed"></Border>
            <!-- UI非表示時の再生位置バー -->
            <Slider Value="{x:Bind SeekBarSlider.Value, Mode=OneWay}" Maximum="{x:Bind _vm.VideoInfo.Length, Mode=OneWay, Converter={StaticResource TimeSpanToDoubleConverter}}" Style="{StaticResource VideoProgressBarStyle}" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" IsEnabled="False" Opacity="0.6" x:Name="ReadOnlySeekBarSlider">
              <Slider.RenderTransform>
                <TranslateTransform Y="8" />
              </Slider.RenderTransform>
            </Slider>

            <!-- コントロールUIを表示切替する -->
            <Border IsHitTestVisible="True" Background="Transparent">
              <i:Interaction.Behaviors>
                <core:EventTriggerBehavior EventName="Tapped">
                  <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="{x:Bind IsDisplayControlUI, Mode=OneWay, Converter={StaticResource BoolNegation}}" />
                </core:EventTriggerBehavior>
              </i:Interaction.Behaviors>
            </Border>

            <!-- プレイヤー内の通知表示 -->
            <StackPanel>
              <!-- 音量表示 -->
              <controls:TransientContainer Content="{x:Bind _vm.SoundVolumeManager.Volume, Mode=OneWay}" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="16">
                <controls:TransientContainer.Background>
                  <SolidColorBrush Color="{ThemeResource SystemAltMediumColor}" />
                </controls:TransientContainer.Background>
                <controls:TransientContainer.ContentTemplate>
                  <DataTemplate>
                    <Grid Margin="16 2 16 4">
                      <Border>
                        <TextBlock FontSize="20" VerticalAlignment="Center">
                          <Run Text="{i18nExt:Localize Key=SoundVolume}" />:
                          <Run Text="{Binding Converter={StaticResource ToUserFriendlySoubleVolume}}" FontSize="22" />%
                        </TextBlock>
                      </Border>
                    </Grid>
                  </DataTemplate>
                </controls:TransientContainer.ContentTemplate>
              </controls:TransientContainer>
              <!-- シーク位置表示 -->
              <controls:TransientContainer Content="{x:Bind SeekSwipe.SwipeAmount, Mode=OneWay}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="16" DisplayDuration="0:0:3">
                <controls:TransientContainer.Background>
                  <SolidColorBrush Color="{ThemeResource SystemAltMediumColor}" />
                </controls:TransientContainer.Background>
                <controls:TransientContainer.ContentTemplate>
                  <DataTemplate>
                    <Grid Margin="16 2 16 4">
                      <Border>
                        <TextBlock FontSize="25" VerticalAlignment="Center" TextLineBounds="TrimToBaseline">
                           <Run Text="{i18nExt:Localize Key=SeekPlaybackPosition}" />: <Run Text="{Binding Converter={StaticResource TimeToMovieLengthConverter}}" /> <Run Text="{i18nExt:Localize Key=Seconds}" />
                        </TextBlock>
                      </Border>
                    </Grid>
                  </DataTemplate>
                </controls:TransientContainer.ContentTemplate>
              </controls:TransientContainer>
            </StackPanel>

            <!-- コントロールUIの本体 -->
            <Grid x:Name="UIControlLayout">
              <i:Interaction.Behaviors>
                <mybehavior:VisiblityFadeChanger x:Name="PlayerControlAutoHide" Delay="{x:Bind _vm.PlayerSettings.AutoHidePlayerControlUIPreventTime, Mode=OneWay}" IsVisible="{x:Bind IsDisplayControlUI, Mode=TwoWay}" />
                <core:DataTriggerBehavior Binding="{x:Bind IsDisplayControlUI, Mode=OneWay}" Value="True">
                  <mybehavior:SetFocus x:Name="FocusWhenShowingControlUIAction" TargetObject="{Binding ElementName=PlayPauseButton}" Delay="00:00:00" IsEnabled="False" />
                </core:DataTriggerBehavior>
              </i:Interaction.Behaviors>
              <toolkit:DockPanel x:Name="DefaultUIControl">
                <!-- 上側 プレイリスト 操作 -->
                <Border toolkit:DockPanel.Dock="Top" Background="{StaticResource HohoemaPlayerBackgroundBrush}">

                  <toolkit:DockPanel x:Name="UIControlHeaderLayout" >

                    <!-- Title Bar Margin -->
                    <Grid x:Name="TitleBarMarginLayout" Height="32" toolkit:DockPanel.Dock="Top" Visibility="Collapsed">
                      <TextBlock x:Name="TitleTextBlock_Nallow" Text="{x:Bind _vm.VideoInfo.Title, Mode=OneWay}" Style="{ThemeResource CaptionTextBlockStyle}" Visibility="Collapsed" Margin="8" />
                    </Grid>
                    <!-- 左上 -->
                    <StackPanel Orientation="Horizontal" toolkit:DockPanel.Dock="Left">
                      <!-- 閉じる -->
                      <Button x:Name="CloseButton" Command="{x:Bind _vm.PrimaryViewPlayerManager.CloseCommand}" UseSystemFocusVisuals="True" MinWidth="48" MinHeight="48"
                            XYFocusRight="{x:Bind ActionsCommandBar}"
                            >
                        <iconPack:PackIconMaterial Kind="Close" />
                      </Button>

                      <!-- メインウィンドウ表示 -->
                      <Button x:Name="ShowPrimaryViewButton" Command="{x:Bind _vm.ShowPrimaryViewCommand}" Visibility="Collapsed" MinWidth="48" MinHeight="48">
                        <StackPanel Orientation="Vertical">
                          <TextBlock Text="{i18nExt:Localize Key=SwitchToMainWindow}" Style="{StaticResource CaptionTextBlockStyle}" VerticalAlignment="Center" />
                        </StackPanel>
                      </Button>
                    </StackPanel>
                    <!-- 右上 -->
                    <CommandBar x:Name="ActionsCommandBar" toolkit:DockPanel.Dock="Right" 
                              XYFocusLeft="{x:Bind CloseButton}"
                              DefaultLabelPosition="Right"
                              IsTabStop="False"
                              >

                      <CommandBar.PrimaryCommands>
                        <AppBarToggleButton x:Name="LikeToggleButton" Label="{i18nExt:Localize Key=NicoLike}" IsChecked="{x:Bind _vm.LikesContext.IsLikes, Mode=TwoWay}" IsEnabled="{x:Bind _vm.LikesContext.NowLikeProcessing, Mode=OneWay, Converter={StaticResource BoolNegation}}" Visibility="Collapsed" />
                        <AppBarButton x:Name="ShowVideoInfoButon" Label="{i18nExt:Localize Key=VideoInfomation}" Command="{x:Bind _vm.OpenVideoInfoCommand}" Visibility="Collapsed"></AppBarButton>
                        <AppBarButton Command="{x:Bind _vm.SelectSidePaneCommand}" CommandParameter="RelatedVideos" Background="Transparent" Label="{i18nExt:Localize Key=RelatedInfomation}" />
                        <AppBarButton x:Name="ShareButton" Label="{i18nExt:Localize Key=Share}" Icon="Link" Visibility="Collapsed" Command="{x:Bind _vm.OpenShareUICommand}" CommandParameter="{x:Bind _vm.VideoInfo, Mode=OneWay}"></AppBarButton>
                        <AppBarButton x:Name="CopyActionsAppBarButton" Label="{i18nExt:Localize Key=Copy}" Visibility="Visible">
                          <AppBarButton.Flyout>
                            <MenuFlyout>
                              <MenuFlyoutItem Text="{i18nExt:Localize Key=CopyVideoId}" Command="{x:Bind _vm.CopyToClipboardCommand}" CommandParameter="{x:Bind _vm.VideoId, Mode=OneWay}" />
                              <MenuFlyoutItem Text="{i18nExt:Localize Key=CopyVideoLink}" Command="{x:Bind _vm.CopyToClipboardCommand}" CommandParameter="{x:Bind _vm.VideoInfo, Mode=OneWay}" />
                              <MenuFlyoutItem Text="{i18nExt:Localize Key=CopyShareText}" Command="{x:Bind _vm.CopyToClipboardWithShareTextCommand}" CommandParameter="{x:Bind _vm.VideoInfo, Mode=OneWay}" />
                            </MenuFlyout>
                          </AppBarButton.Flyout>
                        </AppBarButton>
                        <AppBarButton x:Name="AddContentButton" Label="{i18nExt:Localize Key=Add}" Icon="Add">
                          <AppBarButton.Flyout>
                            <MenuFlyout x:Name="AddToMenuFlyout">
                              <MenuFlyoutItem Text="{i18nExt:Localize Key=MylistAddItem}"
                                            Command="{x:Bind _vm.AddMylistCommand}"
                                            CommandParameter="{x:Bind _vm.VideoInfo, Mode=OneWay}"
                                            />

                              <MenuFlyoutItem Text="{i18nExt:Localize Key=LocalMylistAddItem}"
                                            Command="{x:Bind _vm.LocalPlaylistAddItemCommand}"
                                            CommandParameter="{x:Bind _vm.VideoInfo, Mode=OneWay}"
                                            />

                              <MenuFlyoutItem Text="{i18nExt:Localize Key=SubscriptionAddUser}"
                                            Command="{x:Bind _vm.AddSubscriptionCommand}"
                                            CommandParameter="{x:Bind _vm.VideoInfo, Mode=OneWay}"
                                            />
                              <MenuFlyoutItem Text="{i18nExt:Localize Key=SubscriptionAddSeries}"
                                            Command="{x:Bind _vm.AddSubscriptionCommand}"
                                            CommandParameter="{x:Bind _vm.VideoSeries, Mode=OneWay}"
                                            Visibility="{x:Bind _vm.VideoSeries, Mode=OneWay, Converter={StaticResource NotNullToBoolean}}"
                                            />


                            </MenuFlyout>
                          </AppBarButton.Flyout>
                        </AppBarButton>
                      </CommandBar.PrimaryCommands>

                      <CommandBar.SecondaryCommands>
                        <AppBarButton x:Name="FullscreenButton" Command="{x:Bind _vm.PlayerView.ToggleFullScreenCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Label="{i18nExt:Localize Key=FullScreen}" Icon="FullScreen"></AppBarButton>
                        <AppBarButton x:Name="CompactOverlayButton" Command="{x:Bind _vm.PlayerView.ToggleCompactOverlayCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Label="{i18nExt:Localize Key=CompactOverlay}"></AppBarButton>
                        <AppBarButton x:Name="SmallWindowButton" Command="{x:Bind _vm.PrimaryViewPlayerManager.ToggleFillOrWindowInWindowCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Label="{i18nExt:Localize Key=WindowInWindow}"></AppBarButton>
                        <AppBarButton x:Name="DisplayWithSecondaryViewButton" Command="{x:Bind _vm.TogglePlayerDisplayViewCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Label="{i18nExt:Localize Key=PlayWithSecondaryView}"></AppBarButton>
                        <AppBarToggleButton x:Name="ForceRotateToggleButton" IsChecked="{x:Bind _vm.PlayerSettings.IsForceLandscape, Mode=TwoWay}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Label="{i18nExt:Localize Key=FixToLandscape}" Icon="Orientation"></AppBarToggleButton>
                      </CommandBar.SecondaryCommands>
                    </CommandBar>

                    <Button x:Name="ExitWindonwInWindowViewButton" Command="{x:Bind _vm.PrimaryViewPlayerManager.FillCommand}" Background="Transparent" Visibility="Collapsed" toolkit:DockPanel.Dock="Right" Margin="0 8 0 0" MinWidth="48" MinHeight="48">
                      <SymbolIcon Symbol="FullScreen" />
                    </Button>
                    <Button x:Name="ExitCompactOverlayButton" Command="{x:Bind _vm.PlayerView.ToggleCompactOverlayCommand}" Background="Transparent" Visibility="Collapsed" toolkit:DockPanel.Dock="Right" Margin="0 8 0 0" MinWidth="48" MinHeight="48">
                      <SymbolIcon Symbol="FullScreen" />
                    </Button>

                    <Border />
                  </toolkit:DockPanel>
                </Border>

                <!-- 下側 動画コンテンツ 操作 -->
                <StackPanel x:Name="UIControlContentLayout" toolkit:DockPanel.Dock="Bottom" Background="{StaticResource HohoemaPlayerBackgroundBrush}" Padding="0 0 0 8">
                  <!-- Title -->
                  <StackPanel Margin="8 0">
                    <TextBlock x:Name="TitleTextBlock" Text="{x:Bind _vm.VideoInfo.Title, Mode=OneWay}" FontSize="24" HorizontalAlignment="Center" TextWrapping="Wrap" />
                    <i:Interaction.Behaviors>
                      <core:EventTriggerBehavior EventName="Tapped">
                        <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="False" />
                      </core:EventTriggerBehavior>
                    </i:Interaction.Behaviors>
                  </StackPanel>
                  <!-- シークバー -->
                  <Grid Margin="0 0 0 12">
                    <TextBlock x:Name="SeekDisabledFromNicoScriptText" Text="{i18nExt:Localize Key=DisableSeekFromNicoScript}" Visibility="Collapsed" VerticalAlignment="Bottom" HorizontalAlignment="Center" Opacity="0.6" />
                    <Slider x:Name="SeekBarSlider" Minimum="0.0" Maximum="{x:Bind _vm.VideoInfo.Length, Mode=OneWay, Converter={StaticResource TimeSpanToDoubleConverter}}" Style="{StaticResource VideoProgressBarStyle}" Padding="0 16 0 8" StepFrequency="0.1" LargeChange="30" SmallChange="5" IsThumbToolTipEnabled="True" ThumbToolTipValueConverter="{StaticResource TimeToMovieLengthConverter}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" VerticalAlignment="Center" Opacity="0.75"></Slider>
                  </Grid>
                  <!-- 動画画質 -->
                  <Grid x:Name="VideoProps" Margin="0 0 0 8">
                    <!-- 画質と動画プロバイダーオリジン -->
                    <StackPanel HorizontalAlignment="Left" VerticalAlignment="Bottom" Orientation="Horizontal" Margin="8 0 16 0" Spacing="8">
                      <TextBlock Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" Visibility="{Binding NowPlayingWithCache, Converter={StaticResource BooleanToVisibility}}">
                            <Run Text="{x:Bind _vm.CurrentQuality.Quality, Mode=OneWay, Converter={StaticResource LocalizeConverter}}" /></TextBlock>
                      <HyperlinkButton Padding="0" Opacity="0.7">
                        <TextBlock Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" Visibility="{Binding NowPlayingWithCache, Converter={StaticResource BooleanToVisibilityInverted}}">
                              <Run Text="{x:Bind _vm.CurrentQuality.Quality, Mode=OneWay, Converter={StaticResource LocalizeConverter}}" /></TextBlock>
                        <i:Interaction.Behaviors>
                          <core:EventTriggerBehavior EventName="Click">
                            <mybehavior:OpenFlyout />
                          </core:EventTriggerBehavior>
                        </i:Interaction.Behaviors>
                        <FlyoutBase.AttachedFlyout>
                          <Flyout>
                            <ListView ItemsSource="{x:Bind _vm.AvailableQualities, Mode=OneWay}"
                                      SelectedItem="{x:Bind _vm.CurrentQuality, Mode=OneWay}"
                                      SelectionMode="Single"
                                      IsItemClickEnabled="True"
                                      >
                              <i:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="ItemClick">
                                  <core:InvokeCommandAction Command="{x:Bind _vm.ChangeVideoQualityCommand}"
                                                            InputConverter="{StaticResource ItemClickEventArgsConverter}" />
                                </core:EventTriggerBehavior>
                              </i:Interaction.Behaviors>
                              <ListView.ItemTemplate>
                                <DataTemplate>
                                  <StackPanel Orientation="Horizontal" Spacing="8">
                                    <TextBlock Text="{Binding Quality, Converter={StaticResource LocalizeConverter}}" />
                                    <TextBlock toolkitext:ListViewItemExtensions.IsEnabled="{Binding IsAvailable}">
                                           <Run Text="{Binding Bitrate, Converter={StaticResource ToKMGTPEZY}}" />bps</TextBlock>
                                  </StackPanel>
                                </DataTemplate>
                              </ListView.ItemTemplate>
                            </ListView>
                          </Flyout>
                        </FlyoutBase.AttachedFlyout>
                      </HyperlinkButton>
                      <TextBlock Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" Visibility="{x:Bind _vm.NowPlayingWithCache, Mode=OneWay, Converter={StaticResource BooleanToVisibility}}">
                                                        (<Run Text="{i18nExt:Localize Key=VideoPlayWithCached}" />)</TextBlock>
                      <TextBlock Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" Visibility="{x:Bind _vm.NowPlayingWithCache, Mode=OneWay, Converter={StaticResource BooleanToVisibilityInverted}}">
                                                        (<Run Text="{i18nExt:Localize Key=VideoPlayWithOnline}" />)</TextBlock>
                    </StackPanel>

                    <!-- 動画位置と再生速度倍率 -->
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                      <TextBlock VerticalAlignment="Bottom" IsHitTestVisible="False" Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" Margin="16 0 8 0">
                                        
                                                    <Run Text="{x:Bind VideoPosition, Mode=OneWay, Converter={StaticResource TimeToMovieLengthConverter}}" />
                                                    <Run Text="/" />
                                                    <Run Text="{x:Bind _vm.VideoInfo.Length, Mode=OneWay, Converter={StaticResource TimeToMovieLengthConverter}}" /></TextBlock>
                      <HyperlinkButton Margin="0 0 16 0" VerticalAlignment="Bottom" Opacity="0.7" MinWidth="36" HorizontalAlignment="Right" Padding="0">
                        <i:Interaction.Behaviors>
                          <core:EventTriggerBehavior EventName="Click">
                            <mybehavior:OpenFlyout />
                          </core:EventTriggerBehavior>
                        </i:Interaction.Behaviors>
                        <FlyoutBase.AttachedFlyout>
                          <Flyout>
                            <ListView ItemsSource="{x:Bind PlaybackRateList}"
                                      SelectedItem="{Binding ObservableMediaPlayer.PlaybackRate.Value, Mode=OneWay}"
                                      SelectionMode="Single"
                                      IsItemClickEnabled="True"
                                      >
                              <i:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="ItemClick">
                                  <core:InvokeCommandAction Command="{x:Bind _vm.SetPlaybackRateCommand}"
                                                            InputConverter="{StaticResource ItemClickEventArgsConverter}" />
                                </core:EventTriggerBehavior>
                              </i:Interaction.Behaviors>
                              <ListView.ItemTemplate>
                                <DataTemplate>
                                  <TextBlock>x<Run Text="{Binding}" /></TextBlock>
                                </DataTemplate>
                              </ListView.ItemTemplate>
                            </ListView>
                          </Flyout>
                        </FlyoutBase.AttachedFlyout>
                        <TextBlock VerticalAlignment="Center">x<Run Text="{Binding ObservableMediaPlayer.PlaybackRate.Value}" /></TextBlock>
                      </HyperlinkButton>
                    </StackPanel>
                  </Grid>
                  <!-- ボタン類 -->
                  <Grid Padding="8 0 8 0">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <StackPanel Orientation="Horizontal" Spacing="8">
                      <!-- 音量 -->
                      <Button x:Name="VolumeControlLayout" MinWidth="48" MinHeight="48">
                        <SymbolIcon x:Name="VolumeButton" Symbol="Mute" />
                        <Button.Flyout>
                          <Flyout>
                            <StackPanel Spacing="16" HorizontalAlignment="Stretch" MinWidth="240">
                              <Grid>
                                <TextBlock Text="{i18nExt:Localize Key=LoudnessCorrectionValueTitle}" uwpControls:DockPanel.Dock="Left" />
                                <TextBlock HorizontalAlignment="Right">
                                  <Run Text="{x:Bind _vm.SoundVolumeManager.LoudnessCorrectionValue, Mode=OneWay, Converter={StaticResource ToUserFriendlySoubleVolume}}" />%
                                </TextBlock>
                              </Grid>
                              <Grid>
                                <TextBlock Text="{i18nExt:Localize Key=UseLoudnessCorrection}" uwpControls:DockPanel.Dock="Left" />
                                <ToggleSwitch IsOn="{x:Bind _vm.SoundVolumeManager.IsLoudnessCorrectionEnabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Right" Style="{StaticResource ToggleSwitchNoHeader}" MinWidth="0" />
                              </Grid>
                              <Grid>
                                <TextBlock Text="{i18nExt:Localize Key=Mute}" uwpControls:DockPanel.Dock="Left" VerticalAlignment="Center" />
                                <AppBarButton Icon="Volume" Label="{i18nExt:Localize Key=Mute}" VerticalAlignment="Stretch" x:Name="MuteToggleButton" Command="{x:Bind _vm.ToggleMuteCommand}" HorizontalAlignment="Right" />
                              </Grid>
                              <Grid>
                                <TextBlock Text="{i18nExt:Localize Key=SoundVolume}"  uwpControls:DockPanel.Dock="Left" VerticalAlignment="Center" />
                                <Slider x:Name="VolumeSlider" Orientation="Horizontal" VerticalAlignment="Top" IsThumbToolTipEnabled="True" ThumbToolTipValueConverter="{StaticResource ToUserFriendlySoubleVolume}" Maximum="1.0" Minimum="0.0" StepFrequency="0.01" SmallChange="0.05" LargeChange="0.1" Height="32" Width="160" ValueChanged="VolumeSlider_ValueChanged" HorizontalAlignment="Right" TabIndex="-1" />
                              </Grid>
                            </StackPanel>
                          </Flyout>
                        </Button.Flyout>
                      </Button>
                      <!-- コメント表示切替 -->
                      <Button x:Name="CommentDisplayControlLayout" MinWidth="48" MinHeight="48" ClickMode="Release">
                        <Grid>
                          <iconPack:PackIconMaterial Kind="Comment" x:Name="CommentIcon" Width="20" Height="20" />
                          <Canvas>
                            <Line X1="{Binding ElementName=CommentIcon, Path=ActualWidth}" Y1="0" X2="0" Y2="{Binding ElementName=CommentIcon, Path=ActualHeight}" Stroke="Red" StrokeThickness="4" Visibility="{x:Bind _vm.PlayerSettings.IsCommentDisplay_Video, Mode=OneWay, Converter={StaticResource BooleanToVisibilityInverted}}" Opacity="0.7" />
                          </Canvas>
                        </Grid>
                        <i:Interaction.Behaviors>
                          <core:EventTriggerBehavior EventName="Click">
                            <core:ChangePropertyAction TargetObject="{x:Bind _vm.PlayerSettings}" PropertyName="IsCommentDisplay_Video" Value="{x:Bind _vm.PlayerSettings.IsCommentDisplay_Video, Mode=OneWay, Converter={StaticResource BoolNegation}}" />
                          </core:EventTriggerBehavior>
                        </i:Interaction.Behaviors>
                      </Button>

                      <!-- 単品リピート -->
                      <ToggleButton IsChecked="{x:Bind _vm.IsLoopingEnabled.Value, Mode=TwoWay}" UseSystemFocusVisuals="True" MinWidth="48" MinHeight="48"
                                    >
                        <iconPack:PackIconMaterial x:Name="RepeatModeToggleButtonIcon" Kind="Repeat" RenderTransformOrigin="0.5, 0.5">
                          <iconPack:PackIconMaterial.RenderTransform>
                            <CompositeTransform ScaleX="1.4" ScaleY="1.4" />
                          </iconPack:PackIconMaterial.RenderTransform>
                        </iconPack:PackIconMaterial>

                      </ToggleButton>
                    </StackPanel>
                    <!-- 再生切り替え・シーク -->
                    <StackPanel Orientation="Horizontal" Grid.Column="1" Spacing="16">
                      <Button x:Name="PreviewVideoPositionButon" Command="{x:Bind _vm.SeekCommand}" CommandParameter="{x:Bind PreviewSeekTime}" MinWidth="48" MinHeight="48">
                        <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xED3C;" FontSize="24" />
                      </Button>
                      <Button x:Name="PlayPauseButton" Command="{x:Bind _vm.VideoTogglePlayPauseCommand}" Margin="0 0 0 0" MinWidth="48" MinHeight="48">
                        <iconPack:PackIconMaterial Kind="Play" x:Name="PlayPauseButtonIcon" RenderTransformOrigin="0.5, 0.5">
                          <iconPack:PackIconMaterial.RenderTransform>
                            <CompositeTransform ScaleX="1.35" ScaleY="1.35" />
                          </iconPack:PackIconMaterial.RenderTransform>
                        </iconPack:PackIconMaterial>
                      </Button>
                      <Button x:Name="ForwardVideoPositionButon" Command="{x:Bind _vm.SeekCommand}" CommandParameter="{x:Bind ForwardSeekTime}" MinWidth="48" MinHeight="48">
                        <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xED3D;" FontSize="24" />
                      </Button>
                    </StackPanel>
                    <!-- Settings etc -->
                    <StackPanel Orientation="Horizontal" Grid.Column="2" HorizontalAlignment="Right" VerticalAlignment="Center" Spacing="8">
                      <Button x:Name="OpenCommentListButton" Command="{x:Bind _vm.SelectSidePaneCommand}" CommandParameter="Comment" MinWidth="48" MinHeight="48">
                        <iconPack:PackIconMaterial Kind="Comment" Width="24" Height="24"></iconPack:PackIconMaterial>
                      </Button>
                      <Button x:Name="OpenPlaylistButton" Command="{x:Bind _vm.SelectSidePaneCommand}" CommandParameter="Playlist" MinWidth="48" MinHeight="48">
                        <iconPack:PackIconMaterial Kind="PlaylistPlay" Width="24" Height="24"></iconPack:PackIconMaterial>
                      </Button>
                      <Button x:Name="OpenSettingsPaneButton" Command="{x:Bind _vm.SelectSidePaneCommand}" CommandParameter="Setting" MinWidth="48" MinHeight="48">
                        <SymbolIcon Symbol="Setting" />
                      </Button>
                    </StackPanel>
                  </Grid>
                  <!-- コメントを書く -->
                  <Grid x:Name="CommentLayout" Padding="0 8 0 0" Visibility="Collapsed">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="*" />
                      <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="1*" />
                      <ColumnDefinition Width="1*" />
                      <ColumnDefinition Width="1*" />
                      <ColumnDefinition Width="1*" />
                      <ColumnDefinition Width="1*" />
                      <ColumnDefinition Width="1*" />
                    </Grid.ColumnDefinitions>
                    <TextBox x:Name="CommentTextBox" Text="{Binding CommentPlayer.WritingComment.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" FontSize="18" VerticalAlignment="Center" MaxLength="75" IsTabStop="True" PlaceholderText="{i18nExt:Localize Key=CommentTextBoxPlacefolder}" HorizontalAlignment="Stretch" Margin="8 0 8 0" HorizontalContentAlignment="Stretch" Height="40" Grid.RowSpan="2" Grid.Column="1" Grid.ColumnSpan="4" IsEnabled="{Binding CommentPlayer.NowCommentSubmitDisabledFromNicoScript, Converter={StaticResource BoolNegation}}">
                      <TextBox.Style>
                        <Style TargetType="TextBox">
                        </Style>
                      </TextBox.Style>
                      <i:Interaction.Behaviors>
                        <mybehavior:KeyboardTrigger Key="Escape" x:Name="CommentWriteExitKeyboardTrigger" IsEnabled="False" OnlyWhenFocus="{x:Bind CommentTextBox}">
                          <mybehavior:KeyboardTrigger.Actions>
                            <mybehavior:SetFocus TargetObject="{x:Bind PlayPauseButton}" />
                          </mybehavior:KeyboardTrigger.Actions>
                        </mybehavior:KeyboardTrigger>
                      </i:Interaction.Behaviors>
                    </TextBox>
                    <Button x:Name="CommentCommandEditButton"
                            Content="{Binding CommentCommandEditerViewModel.CommandsText.Value, Mode=OneWay}"                            
                            Margin="8 0 8 0" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center" DataContext="{x:Bind _vm}" Height="40" UseSystemFocusVisuals="True" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="1">
                      <Button.Flyout>
                        <Flyout x:Name="CommandEditerFlyout">
                          <local:CommentCommandEditer x:Name="CommandEditer" DataContext="{x:Bind _vm.CommentCommandEditerViewModel, Mode=OneWay}" />
                        </Flyout>
                      </Button.Flyout>

                      <i:Interaction.Behaviors>
                        <core:DataTriggerBehavior Binding="{Binding CommentCommandEditerViewModel.CommandsText.Value}" Value="{x:Null}" ComparisonCondition="NotEqual">
                          <core:ChangePropertyAction TargetObject="{Binding CommentPlayer.CommandText}" PropertyName="Value" Value="{Binding CommentCommandEditerViewModel.CommandsText.Value}" />
                        </core:DataTriggerBehavior>
                      </i:Interaction.Behaviors>
                    </Button>
                    <Button x:Name="CommentSubmitButton" Margin="8 0 8 0" Height="40" Command="{x:Bind _vm.CommentPlayer.CommentSubmitCommand}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center" UseSystemFocusVisuals="True" Grid.RowSpan="2" Grid.Column="5" Grid.ColumnSpan="1">
                      <Grid>
                        <TextBlock Text="{i18nExt:Localize Key=SubmitComment}" />
                        <ProgressRing x:Name="CommentSubmittingProgressRing" IsActive="False" Height="24" Width="24" VerticalAlignment="Center" />
                      </Grid>
                    </Button>
                  </Grid>
                </StackPanel>
                <!-- 中央 余白とリコメンド -->
                <Grid x:Name="UIControlCenterLayout" BorderThickness="0">
                  <Border IsHitTestVisible="True" Background="Transparent" BorderThickness="0">
                    <i:Interaction.Behaviors>
                      <core:EventTriggerBehavior EventName="Tapped">
                        <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="False" />
                      </core:EventTriggerBehavior>
                    </i:Interaction.Behaviors>
                  </Border>
                  <Border x:Name="PlayEndedRecommendContainer" Visibility="Collapsed">
                    <controls:DelayedAutoTriggerButton x:Name="PlayEndedRecommend" Command="{x:Bind _vm.VideoEndedRecommendation.PlayNextVideoCommand}" CancelCommand="{Binding VideoEndedRecommendation.CanceledNextPartMoveCommand}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="40 0" IsAutoTriggerEnabled="{Binding PlayerSettings.AutoMoveNextVideoOnPlaylistEmpty}">
                      <controls:DelayedAutoTriggerButton.CenterContent>
                        <StackPanel Spacing="4">
                          <TextBlock Text="{i18nExt:Localize Key=RecommendedNextVideo}" Opacity="0.7" />
                          <TextBlock x:Name="RecommendVideoTitle" Text="{x:Bind _vm.VideoEndedRecommendation.NextVideoTitle, Mode=OneWay}" Style="{StaticResource BaseTextBlockStyle}"  />
                        </StackPanel>
                      </controls:DelayedAutoTriggerButton.CenterContent>
                      <i:Interaction.Behaviors>
                        <core:DataTriggerBehavior Binding="{Binding VideoEndedRecommendation.HasNextVideo}" Value="True" ComparisonCondition="Equal">
                          <core:CallMethodAction MethodName="Start" />
                        </core:DataTriggerBehavior>
                        <core:DataTriggerBehavior Binding="{Binding VideoEndedRecommendation.IsEnded.Value}" Value="False" ComparisonCondition="Equal">
                          <core:CallMethodAction MethodName="Cancel" />
                        </core:DataTriggerBehavior>
                      </i:Interaction.Behaviors>
                    </controls:DelayedAutoTriggerButton>
                  </Border>
                  <Border x:Name="CenterTopGradient" Height="32" VerticalAlignment="Top" >
                    <Border.Background>
                      <LinearGradientBrush StartPoint="1, 1" EndPoint="1, 0">
                        <!-- Color set in code behind -->
                        <GradientStop x:Name="CenterTopGradientStop_End" Color="Transparent" Offset="0.0" />
                        <GradientStop Color="{ThemeResource SystemAltMediumColor}" Offset="1.0" />
                      </LinearGradientBrush>
                    </Border.Background>
                  </Border>
                  <Border x:Name="CenterBottomGradient" Height="32" BorderThickness="0" VerticalAlignment="Bottom" >
                    <Border.Background>
                      <LinearGradientBrush x:Name="ControlPanelBackgroundBrush" StartPoint="1, 0" EndPoint="1, 1">
                        <GradientStop x:Name="CenterBottomGradientStop_End" Color="Transparent" Offset="0.0" />
                        <GradientStop Color="{ThemeResource SystemAltMediumColor}" Offset="1.0" x:Name="GradientStop2" />
                      </LinearGradientBrush>
                    </Border.Background>
                    <Border.RenderTransform>
                      <TranslateTransform Y="0" />
                    </Border.RenderTransform>
                    <i:Interaction.Behaviors>
                      <core:EventTriggerBehavior EventName="Tapped">
                        <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="False" />
                      </core:EventTriggerBehavior>
                    </i:Interaction.Behaviors>
                  </Border>
                  <Border x:Name="GoPrevVideoLayout" VerticalAlignment="Center" HorizontalAlignment="Left">
                    <Button MinWidth="24" Height="120" Command="{x:Bind _vm.PlayPreviousCommand}" BorderBrush="{StaticResource HohoemaPlayerBackgroundBrush}" BorderThickness="0 1 1 1">
                      <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xE016;" FontSize="20" Foreground="{ThemeResource HohoemaPlayerBackgroundBrush}"></TextBlock>
                    </Button>
                  </Border>
                  <Border x:Name="GoNextVideoLayout" VerticalAlignment="Center" HorizontalAlignment="Right">
                    <Button MinWidth="24" Height="120" Command="{x:Bind _vm.PlayNextCommand}" BorderBrush="{StaticResource HohoemaPlayerBackgroundBrush}" BorderThickness="1 1 0 1">
                      <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xE017;" FontSize="20" Foreground="{ThemeResource HohoemaPlayerBackgroundBrush}"></TextBlock>
                    </Button>
                  </Border>
                </Grid>
              </toolkit:DockPanel>

            </Grid>
            <Grid Visibility="{x:Bind IsDisplayControlUI, Mode=OneWay, Converter={StaticResource BooleanToVisibilityInverted}}">
              <Border IsHitTestVisible="True" Background="Transparent">
                <i:Interaction.Behaviors>
                  <core:EventTriggerBehavior EventName="Tapped">
                    <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="{x:Bind IsDisplayControlUI, Mode=OneWay, Converter={StaticResource BoolNegation}}" />
                  </core:EventTriggerBehavior>
                </i:Interaction.Behaviors>
              </Border>
            </Grid>
            <Grid>
              <!-- 有料動画・サポートされていないプロトコル・動画形式・チャンネル会員限定動画・プレミアム会員限定動画 -->
              <Border HorizontalAlignment="Left" VerticalAlignment="Top" Margin="32 64" Visibility="{x:Bind _vm.IsNotSupportVideoType, Mode=OneWay, Converter={StaticResource BooleanToVisibility}}" Background="{StaticResource AppBarItemPointerOverBackgroundThemeBrush}" Padding="16">
                <Grid MinWidth="300">
                  <iconPack:PackIconMaterial Kind="VideoOff" Margin="16 8 32 8" Width="32" Height="32" toolkit:DockPanel.Dock="Left" VerticalAlignment="Center" />
                  <StackPanel Spacing="16" HorizontalAlignment="Right">
                    <TextBlock Text="{i18nExt:Localize Key=CanNotPlay}" VerticalAlignment="Center" Style="{StaticResource SubtitleTextBlockStyle}" Margin="0 0 0 0" />
                    <TextBlock VerticalAlignment="Center" TextWrapping="Wrap" HorizontalAlignment="Right" >
                        <Run Text="{x:Bind _vm.CannotPlayReason, Mode=OneWay}" />
                    </TextBlock>
                    <Button Content="{i18nExt:Localize Key=OpenWithBrowser}"
                            Command="{x:Bind _vm.OpenLinkCommand}" 
                            CommandParameter="{x:Bind _vm.VideoInfo, Mode=OneWay}"
                            Style="{ThemeResource AccentButtonStyle}" 
                            Height="48"
                            HorizontalAlignment="Right"
                            />
                  </StackPanel>
                </Grid>
              </Border>
            </Grid>
          </Grid>
        </SplitView.Content>
      </SplitView>
    </toolkit:LayoutTransformControl>


    <VisualStateManager.VisualStateGroups>

      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:DeviceFamilyStateTrigger DeviceFamily="Xbox" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CopyActionsAppBarButton.Visibility" Value="Collapsed" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{Binding CurrentPlayerDisplayView.Value, Mode=OneWay}" EqualTo="SecondaryView" />
          </VisualState.StateTriggers>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{Binding ApplicationLayoutManager.AppLayout, Mode=OneWay}" EqualTo="{x:Bind models:ApplicationLayout.TV}" />
            <windowsTriggers:DeviceFamilyStateTrigger DeviceFamily="Xbox" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="FocusWhenShowingControlUIAction.IsEnabled" Value="True" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- 画面サイズごとの表示・非表示に切り替え -->
      <VisualStateGroup>

        <!-- 幅が十分に広いとき -->
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:CompareStateTrigger Value="{x:Bind MediaControlWidth, Mode=OneWay}" CompareTo="{StaticResource WidthBreakPoint_WideToMiddle}" Comparison="GreaterThan" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
          </VisualState.Setters>
        </VisualState>

        <!-- 中ぐらい -->
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:CompareStateTrigger Value="{x:Bind MediaControlWidth, Mode=OneWay}" CompareTo="{StaticResource WidthBreakPoint_MiddleToNallow}" Comparison="GreaterThan" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PreviewVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="ForwardVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="CommentTextBox.(Grid.Row)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentTextBox.(Grid.Column)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.ColumnSpan)" Value="6" />
            <Setter Target="CommentCommandEditButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.Column)" Value="0" />
            <Setter Target="CommentCommandEditButton.(Grid.ColumnSpan)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.Column)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.ColumnSpan)" Value="3" />
          </VisualState.Setters>
        </VisualState>
        <!-- 超狭い -->
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:CompareStateTrigger Value="{x:Bind MediaControlWidth, Mode=OneWay}" CompareTo="{StaticResource WidthBreakPoint_NallowToVeryNallow}" Comparison="GreaterThan" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PreviewVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="ForwardVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="CommentTextBox.(Grid.Row)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentTextBox.(Grid.Column)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.ColumnSpan)" Value="6" />
            <Setter Target="CommentCommandEditButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.Column)" Value="0" />
            <Setter Target="CommentCommandEditButton.(Grid.ColumnSpan)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.Column)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.ColumnSpan)" Value="3" />

            <Setter Target="TitleTextBlock.Visibility" Value="Collapsed" />
            <Setter Target="TitleTextBlock_Nallow.Visibility" Value="Visible" />

          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:CompareStateTrigger Value="{x:Bind MediaControlWidth, Mode=OneWay}" CompareTo="0" Comparison="GreaterThan" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PreviewVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="ForwardVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="CommentTextBox.(Grid.Row)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentTextBox.(Grid.Column)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.ColumnSpan)" Value="6" />
            <Setter Target="CommentCommandEditButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.Column)" Value="0" />
            <Setter Target="CommentCommandEditButton.(Grid.ColumnSpan)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.Column)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.ColumnSpan)" Value="3" />

            <Setter Target="TitleTextBlock.Visibility" Value="Collapsed" />
            <Setter Target="TitleTextBlock_Nallow.Visibility" Value="Visible" />

          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- ログインしている場合に有効になるサービスを表示する -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind _vm.NiconicoSession.IsLoggedIn, Mode=OneWay}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentLayout.Visibility" Value="Visible" />
            <Setter Target="LikeToggleButton.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- インターネット接続状態による表示切替 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <connectivityTrigger:NetworkConnectionStateTrigger Condition="InternetAccess" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ShowVideoInfoButon.Visibility" Value="Visible" />
            <Setter Target="ShareButton.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- コンパクトオーバーレイや小窓の戻るボタン表示 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind _vm.PlayerView.IsCompactOverlay, Mode=OneWay}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ExitCompactOverlayButton.Visibility" Value="Visible" />

            <Setter Target="ActionsCommandBar.Visibility" Value="Collapsed" />
            <Setter Target="OpenPlaylistButton.Visibility" Value="Collapsed" />
            <Setter Target="OpenSettingsPaneButton.Visibility" Value="Collapsed" />
            <Setter Target="VolumeControlLayout.Visibility" Value="Collapsed" />
            <Setter Target="VideoProps.Visibility" Value="Collapsed" />
            <Setter Target="CommentCommandEditButton.Visibility" Value="Collapsed" />
            <Setter Target="CommentSubmitButton.Visibility" Value="Collapsed" />

            <Setter Target="SeekBarSlider.Visibility" Value="Collapsed" />

          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{Binding PrimaryViewPlayerManager.DisplayMode, Mode=OneWay}" EqualTo="WindowInWindow" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ExitWindonwInWindowViewButton.Visibility" Value="Visible" />

            <Setter Target="ActionsCommandBar.Visibility" Value="Collapsed" />
            <Setter Target="OpenPlaylistButton.Visibility" Value="Collapsed" />
            <Setter Target="OpenSettingsPaneButton.Visibility" Value="Collapsed" />
            <Setter Target="VolumeControlLayout.Visibility" Value="Collapsed" />
            <Setter Target="VideoProps.Visibility" Value="Collapsed" />
            <Setter Target="CommentCommandEditButton.Visibility" Value="Collapsed" />
            <Setter Target="CommentSubmitButton.Visibility" Value="Collapsed" />

            <Setter Target="SeekBarSlider.Visibility" Value="Collapsed" />

          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- コンパクトオーバーレイ切り替えボタンの表示・非表示 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:IsSupportCompactOverlayTrigger />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CompactOverlayButton.Visibility" Value="Visible" />
            <Setter Target="CompactOverlayButton_Menu.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- Xbox時のレイアウト調整 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{Binding ApplicationLayoutManager.AppLayout, Mode=OneWay}" EqualTo="{x:Bind models:ApplicationLayout.TV}" />
            <hardTrigger:DeviceFamilyTrigger Condition="Xbox" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerSidePaneLayout.Margin" Value="0 27 0 27" />
            <Setter Target="UIControlContentLayout.Padding" Value="48 0 48 27" />
            <Setter Target="UIControlHeaderLayout.Margin" Value="48 27 48 0" />
            <Setter Target="GoPrevVideoLayout.Margin" Value="48 0 0 0" />
            <Setter Target="GoNextVideoLayout.Margin" Value="0 0 48 0" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- フルスクリーン -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind IsDisplayControlUI, Mode=OneWay}" />
            <StateTrigger IsActive="{Binding PlayerView.IsCompactOverlay, Mode=OneWay}" />
            <myTrigger:WindowInWindowViewModeTrigger myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind RootLayout}"/>
            <windowsTriggers:EqualsStateTrigger Value="{Binding CurrentPlayerDisplayView.Value, Mode=OneWay}" EqualTo="SecondaryView" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="AutoHideCursor.IsAutoHideEnabled" Value="False" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="True" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="AutoHideCursor.IsAutoHideEnabled" Value="True" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- デバイスごとの閉じる・最大化・小窓ボタンの表示切り替え -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <hardTrigger:DeviceFamilyTrigger Condition="Mobile" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SmallWindowButton.Visibility" Value="Visible" />
            <Setter Target="SmallWindowButton_Menu.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton_Menu.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <hardTrigger:DeviceFamilyTrigger Condition="Xbox" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SmallWindowButton.Visibility" Value="Visible" />
            <Setter Target="SmallWindowButton_Menu.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{Binding CurrentPlayerDisplayView.Value, Mode=OneWay}" EqualTo="SecondaryView" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ShowPrimaryViewButton.Visibility" Value="Visible" />
            <Setter Target="SmallWindowButton.Visibility" Value="Collapsed" />
            <Setter Target="SmallWindowButton_Menu.Visibility" Value="Collapsed" />
            <Setter Target="FullscreenButton.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton_Menu.Visibility" Value="Visible" />
            <Setter Target="CloseButton.Visibility" Value="Collapsed" />
            <Setter Target="DisplayWithSecondaryViewButton.Visibility" Value="Visible" />
            <Setter Target="DisplayWithSecondaryViewButton.Label" Value="{i18nExt:Localize Key=PlayWithPrimaryView}" />
            <Setter Target="DisplayWithSecondaryViewButton_Menu.Visibility" Value="Visible" />
            <Setter Target="DisplayWithSecondaryViewButton_Menu.Text" Value="{i18nExt:Localize Key=PlayWithPrimaryView}" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <hardTrigger:DeviceFamilyTrigger Condition="Desktop" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SmallWindowButton.Visibility" Value="Visible" />
            <Setter Target="SmallWindowButton_Menu.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton_Menu.Visibility" Value="Visible" />
            <Setter Target="DisplayWithSecondaryViewButton.Visibility" Value="Visible" />
            <Setter Target="DisplayWithSecondaryViewButton_Menu.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- SplitViewのペインを開いた時のサイズ（最小サイズがOpePaneLaneghになるためレイアウトが崩れる場合がある）-->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding PlayerView.IsCompactOverlay, Mode=OneWay}" />
            <myTrigger:WindowInWindowViewModeTrigger myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind RootLayout}"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerSplitView.OpenPaneLength" Value="0" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <hardTrigger:DeviceFamilyTrigger Condition="Mobile" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerSplitView.OpenPaneLength" Value="300" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <hardTrigger:DeviceFamilyTrigger Condition="Xbox" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerSplitView.OpenPaneLength" Value="450" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <hardTrigger:DeviceFamilyTrigger Condition="Desktop" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerSplitView.OpenPaneLength" Value="450" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- 再生・停止 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding ObservableMediaPlayer.NowPlaying.Value}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayPauseButtonIcon.Kind" Value="Pause" />
            <Setter Target="TitleTextBlock.Opacity" Value="0.7" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- ミュートの有効・無効 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding ObservableMediaPlayer.IsMuted.Value}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="VolumeButton.Symbol" Value="Mute" />
            <Setter Target="MuteToggleButton.Icon" Value="Mute" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="True" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="VolumeButton.Symbol" Value="Volume" />
            <Setter Target="MuteToggleButton.Icon" Value="Volume" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- ウィンドウ非アクティブ時にマウス移動に反応するエリアを拡大する -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:WindowActiveTrigger Inverted="True" myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind RootLayout}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="WindowDeactiveMouseMoveDetectWall.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- シークバー表示 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind IsDisplayControlUI, Mode=OneWay}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <!-- 読み取り再生位置スライダーの表示状態 -->
            <Setter Target="ReadOnlySeekBarSlider.Visibility" Value="Collapsed" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- コントロールUIの自動非表示をOFFにするタイミングの制御 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <!-- Target="{x:Bind CommentTextBox}" と指定すると動作しない -->
            <myTrigger:FocusTrigger Target="{Binding ElementName=CommentTextBox}" myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind RootLayout}" />
            <myTrigger:FlyoutIsOpenStateTrigger TargetFlyout="{Binding ElementName=CommandEditerFlyout}" myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind RootLayout}" />
            <StateTrigger IsActive="{Binding ElementName=ActionsCommandBar, Path=IsOpen, Mode=OneWay}" />
            <StateTrigger IsActive="{x:Bind NowVideoPositionChanging, Mode=OneWay}" />
            <StateTrigger IsActive="{Binding PlayerView.IsCompactOverlay, Mode=OneWay}" />
            <StateTrigger IsActive="{Binding PlayerSettings.IsAutoHidePlayerControlUI, Mode=OneWay, Converter={StaticResource BoolNegation}}" />
            <StateTrigger IsActive="{Binding ObservableMediaPlayer.NowPlaying.Value, Converter={StaticResource BoolNegation}}" />
            <windowsTriggers:EqualsStateTrigger Value="{Binding ApplicationLayoutManager.InteractionMode, Mode=OneWay}" EqualTo="Controller" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerControlAutoHide.IsAutoHideEnabled" Value="False" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- プレイヤーとコメントのショートカットの無効化 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <!-- Target="{x:Bind CommentTextBox}" と指定すると動作しない -->
            <myTrigger:FocusTrigger Target="{x:Bind CommentTextBox}" />
            <StateTrigger IsActive="{Binding ElementName=PlayerSplitView, Path=IsPaneOpen}" />
            <myTrigger:WindowInWindowViewModeTrigger myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind RootLayout}" />
            <myTrigger:FlyoutIsOpenStateTrigger TargetFlyout="{Binding ElementName=CommandEditerFlyout}" myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind RootLayout}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentWriteBeginKeyboardTrigger.IsEnabled" Value="False" />
            <Setter Target="PlayPauseToggleKeyboardTrigger.IsEnabled" Value="False" />
            <Setter Target="VideoForwardKeyboardTrigger.IsEnabled" Value="False" />
            <Setter Target="VideoPreviewKeyboardTrigger.IsEnabled" Value="False" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- コメント入力中のキーボードショートカットの有効・無効 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:FocusTrigger Target="{Binding ElementName=CommentTextBox}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentWriteExitKeyboardTrigger.IsEnabled" Value="True" />
            <Setter Target="CommentSubmitKeyboardTrigger.IsEnabled" Value="True" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- コメント書き込み中 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding CommentPlayer.NowSubmittingComment.Value}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentSubmittingProgressRing.IsActive" Value="True" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- コメントコマンドが未選択 -->
      <!--
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind CommandEditer.CommandString, Converter={StaticResource EmptyStringToBoolean}, Mode=OneWay}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentCommandEditButton.Content"
                    Value="{i18nExt:Localize Key=CommentCommand}" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      -->
      <!-- Landscape固定ボタンの表示管理 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <uiTrigger:OrientationTrigger Condition="Landscape" />
          </VisualState.StateTriggers>
          <VisualState.Setters></VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <intractionTrigger:InteractionModeTrigger Condition="Touch" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ForceRotateToggleButton.Visibility" Value="Visible" />
            <Setter Target="ForceRotateToggleButton_Menu.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- モバイルの縦持ち時のLandscape固定処理 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:WindowInWindowViewModeTrigger myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind RootLayout}"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="LayoutRotateTranform.Angle" Value="0" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind _vm.PlayerSettings.IsForceLandscape, Mode=OneWay, Converter={StaticResource BoolNegation}}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="LayoutRotateTranform.Angle" Value="0" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <logicalTrigger:MultiTrigger ConditionModifier="{StaticResource AndModifier}">
              <logicalTrigger:MultiTrigger.Triggers>
                <uiTrigger:OrientationTrigger Condition="Portrait" />
                <intractionTrigger:InteractionModeTrigger Condition="Touch" />
              </logicalTrigger:MultiTrigger.Triggers>
            </logicalTrigger:MultiTrigger>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="LayoutRotateTranform.Angle" Value="90" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- ウィンドウタイトルバーへの対応 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <hardTrigger:DeviceFamilyTrigger Condition="Desktop" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="TitleBarMarginLayout.Visibility" Value="Visible" />
            <Setter Target="PlayerSidePaneLayout.Padding" Value="0 32 0 0" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- ニコスクリプト: シーク禁止 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind _vm.CommentPlayer.NowSeekDisabledFromNicoScript, Mode=OneWay}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SeekBarSlider.IsEnabled" Value="False" />
            <Setter Target="SeekDisabledFromNicoScriptText.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- ニコスクリプト: コメント禁止 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind _vm.CommentPlayer.NowCommentSubmitDisabledFromNicoScript, Mode=OneWay}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentTextBox.IsEnabled" Value="False" />
            <Setter Target="CommentTextBox.PlaceholderText" Value="{i18nExt:Localize Key=DisableCommentSubmitFromNicoScript}" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- コントロールUI中央の表示 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding VideoEndedRecommendation.HasRecomend.Value}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="UIControlCenterLayout.Background" Value="{ThemeResource SystemAltMediumColor}" />
            <Setter Target="CenterTopGradient.Visibility" Value="Collapsed" />
            <Setter Target="CenterBottomGradient.Visibility" Value="Collapsed" />
            <Setter Target="PlayEndedRecommendContainer.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:CompositeStateTrigger Operator="And">
              <StateTrigger IsActive="{Binding VideoEndedRecommendation.HasRecomend.Value}" />
              <windowsTriggers:CompositeStateTrigger Operator="Or">
                <StateTrigger IsActive="{Binding PlayerView.IsCompactOverlay, Mode=OneWay}" />
                <myTrigger:WindowInWindowViewModeTrigger myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind RootLayout}"/>
              </windowsTriggers:CompositeStateTrigger>
            </windowsTriggers:CompositeStateTrigger>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="UIControlCenterLayout.Background" Value="{ThemeResource SystemAltMediumColor}" />
            <Setter Target="CenterTopGradient.Visibility" Value="Collapsed" />
            <Setter Target="CenterBottomGradient.Visibility" Value="Collapsed" />
            <Setter Target="PlayEndedRecommendContainer.Visibility" Value="Visible" />
            <Setter Target="RecommendVideoTitle.Style" Value="{StaticResource CaptionTextBlockStyle}" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding PlayerView.IsCompactOverlay, Mode=OneWay}" />
            <myTrigger:WindowInWindowViewModeTrigger myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind RootLayout}"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="UIControlCenterLayout.Background" Value="{ThemeResource SystemAltMediumColor}" />
            <Setter Target="CenterTopGradient.Visibility" Value="Collapsed" />
            <Setter Target="CenterBottomGradient.Visibility" Value="Collapsed" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- 小窓状態の時、コントローラーのショートカット操作を無効に -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:WindowInWindowViewModeTrigger myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind RootLayout}"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ControllerToggleDisplayUITrigger.IsEnabled" Value="False" />
            <Setter Target="ConrollerHidePlayerTrigger.IsEnabled" Value="False" />
            <Setter Target="ControllerSeekPreviewTrigger.IsEnabled" Value="False" />
            <Setter Target="ControllerSeekForwardTrigger.IsEnabled" Value="False" />
            <Setter Target="ControllerTogglePlayPauseTrigger.IsEnabled" Value="False" />
            <Setter Target="ControllerToggleDisplayUITrigger.IsEnabled" Value="False" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>


      <!-- サイドペインの内容毎の表示切替 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{Binding SidePaneType, Mode=OneWay}" EqualTo="Comment" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerSplitView.DisplayMode" Value="Inline" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
    </VisualStateManager.VisualStateGroups>


  </Grid>
</Page>
